{"ast":null,"code":"'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function (duration, audio, video) {\n  // :ByteArray {\n  var headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n  return result;\n};\nmodule.exports = getFlvHeader;","map":{"version":3,"names":["FlvTag","require","getFlvHeader","duration","audio","video","headBytes","Uint8Array","head","DataView","buffer","metadata","result","metadataLength","undefined","setUint8","setUint32","byteLength","set","METADATA_TAG","pts","dts","writeMetaDataDouble","finalize","length","module","exports"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-media-sources/node_modules/mux.js/lib/flv/flv-header.js"],"sourcesContent":["'use strict';\n\nvar FlvTag = require('./flv-tag.js');\n\n// For information on the FLV format, see\n// http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf.\n// Technically, this function returns the header and a metadata FLV tag\n// if duration is greater than zero\n// duration in seconds\n// @return {object} the bytes of the FLV header as a Uint8Array\nvar getFlvHeader = function(duration, audio, video) { // :ByteArray {\n  var\n    headBytes = new Uint8Array(3 + 1 + 1 + 4),\n    head = new DataView(headBytes.buffer),\n    metadata,\n    result,\n    metadataLength;\n\n  // default arguments\n  duration = duration || 0;\n  audio = audio === undefined ? true : audio;\n  video = video === undefined ? true : video;\n\n  // signature\n  head.setUint8(0, 0x46); // 'F'\n  head.setUint8(1, 0x4c); // 'L'\n  head.setUint8(2, 0x56); // 'V'\n\n  // version\n  head.setUint8(3, 0x01);\n\n  // flags\n  head.setUint8(4, (audio ? 0x04 : 0x00) | (video ? 0x01 : 0x00));\n\n  // data offset, should be 9 for FLV v1\n  head.setUint32(5, headBytes.byteLength);\n\n  // init the first FLV tag\n  if (duration <= 0) {\n    // no duration available so just write the first field of the first\n    // FLV tag\n    result = new Uint8Array(headBytes.byteLength + 4);\n    result.set(headBytes);\n    result.set([0, 0, 0, 0], headBytes.byteLength);\n    return result;\n  }\n\n  // write out the duration metadata tag\n  metadata = new FlvTag(FlvTag.METADATA_TAG);\n  metadata.pts = metadata.dts = 0;\n  metadata.writeMetaDataDouble('duration', duration);\n  metadataLength = metadata.finalize().length;\n  result = new Uint8Array(headBytes.byteLength + metadataLength);\n  result.set(headBytes);\n  result.set(head.byteLength, metadataLength);\n\n  return result;\n};\n\nmodule.exports = getFlvHeader;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,YAAY,GAAG,SAAAA,CAASC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAAE;EACpD,IACEC,SAAS,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzCC,IAAI,GAAG,IAAIC,QAAQ,CAACH,SAAS,CAACI,MAAM,CAAC;IACrCC,QAAQ;IACRC,MAAM;IACNC,cAAc;;EAEhB;EACAV,QAAQ,GAAGA,QAAQ,IAAI,CAAC;EACxBC,KAAK,GAAGA,KAAK,KAAKU,SAAS,GAAG,IAAI,GAAGV,KAAK;EAC1CC,KAAK,GAAGA,KAAK,KAAKS,SAAS,GAAG,IAAI,GAAGT,KAAK;;EAE1C;EACAG,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACxBP,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACxBP,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;EAExB;EACAP,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC;;EAEtB;EACAP,IAAI,CAACO,QAAQ,CAAC,CAAC,EAAE,CAACX,KAAK,GAAG,IAAI,GAAG,IAAI,KAAKC,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;;EAE/D;EACAG,IAAI,CAACQ,SAAS,CAAC,CAAC,EAAEV,SAAS,CAACW,UAAU,CAAC;;EAEvC;EACA,IAAId,QAAQ,IAAI,CAAC,EAAE;IACjB;IACA;IACAS,MAAM,GAAG,IAAIL,UAAU,CAACD,SAAS,CAACW,UAAU,GAAG,CAAC,CAAC;IACjDL,MAAM,CAACM,GAAG,CAACZ,SAAS,CAAC;IACrBM,MAAM,CAACM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEZ,SAAS,CAACW,UAAU,CAAC;IAC9C,OAAOL,MAAM;EACf;;EAEA;EACAD,QAAQ,GAAG,IAAIX,MAAM,CAACA,MAAM,CAACmB,YAAY,CAAC;EAC1CR,QAAQ,CAACS,GAAG,GAAGT,QAAQ,CAACU,GAAG,GAAG,CAAC;EAC/BV,QAAQ,CAACW,mBAAmB,CAAC,UAAU,EAAEnB,QAAQ,CAAC;EAClDU,cAAc,GAAGF,QAAQ,CAACY,QAAQ,CAAC,CAAC,CAACC,MAAM;EAC3CZ,MAAM,GAAG,IAAIL,UAAU,CAACD,SAAS,CAACW,UAAU,GAAGJ,cAAc,CAAC;EAC9DD,MAAM,CAACM,GAAG,CAACZ,SAAS,CAAC;EACrBM,MAAM,CAACM,GAAG,CAACV,IAAI,CAACS,UAAU,EAAEJ,cAAc,CAAC;EAE3C,OAAOD,MAAM;AACf,CAAC;AAEDa,MAAM,CAACC,OAAO,GAAGxB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}