{"ast":null,"code":"'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function () {\n  var syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n  this.push = function (data) {\n    var swapBuffer;\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n        case 0:\n          // skip past non-sync sequences\n          if (buffer[i - 1] !== 0) {\n            i += 2;\n            break;\n          } else if (buffer[i - 2] !== 0) {\n            i++;\n            break;\n          }\n\n          // deliver the NAL unit if it isn't empty\n          if (syncPoint + 3 !== i - 2) {\n            this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n          }\n\n          // drop trailing zeroes\n          do {\n            i++;\n          } while (buffer[i] !== 1 && i < buffer.length);\n          syncPoint = i - 2;\n          i += 3;\n          break;\n        case 1:\n          // skip past non-sync sequences\n          if (buffer[i - 1] !== 0 || buffer[i - 2] !== 0) {\n            i += 3;\n            break;\n          }\n\n          // deliver the NAL unit\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n          syncPoint = i - 2;\n          i += 3;\n          break;\n        default:\n          // the current byte isn't a one or zero, so it cannot be part\n          // of a sync sequence\n          i += 3;\n          break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n  this.flush = function () {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function () {\n  var nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n  H264Stream.prototype.init.call(this);\n  self = this;\n  this.push = function (packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n    nalByteStream.push(packet);\n  };\n  nalByteStream.on('data', function (data) {\n    var event = {\n      trackId: trackId,\n      pts: currentPts,\n      dts: currentDts,\n      data: data\n    };\n    switch (data[0] & 0x1f) {\n      case 0x05:\n        event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n        break;\n      case 0x06:\n        event.nalUnitType = 'sei_rbsp';\n        event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n        break;\n      case 0x07:\n        event.nalUnitType = 'seq_parameter_set_rbsp';\n        event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n        event.config = readSequenceParameterSet(event.escapedRBSP);\n        break;\n      case 0x08:\n        event.nalUnitType = 'pic_parameter_set_rbsp';\n        break;\n      case 0x09:\n        event.nalUnitType = 'access_unit_delimiter_rbsp';\n        break;\n      default:\n        break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function () {\n    self.trigger('done');\n  });\n  this.flush = function () {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function (count, expGolombDecoder) {\n    var lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = nextScale === 0 ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function (data) {\n    var length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength,\n      newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function (data) {\n    var frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder,\n      profileIdc,\n      levelIdc,\n      profileCompatibility,\n      chromaFormatIdc,\n      picOrderCntType,\n      numRefFramesInPicOrderCntCycle,\n      picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) {\n        // seq_scaling_matrix_present_flag\n        scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) {\n            // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) {\n      // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1:\n            sarRatio = [1, 1];\n            break;\n          case 2:\n            sarRatio = [12, 11];\n            break;\n          case 3:\n            sarRatio = [10, 11];\n            break;\n          case 4:\n            sarRatio = [16, 11];\n            break;\n          case 5:\n            sarRatio = [40, 33];\n            break;\n          case 6:\n            sarRatio = [24, 11];\n            break;\n          case 7:\n            sarRatio = [20, 11];\n            break;\n          case 8:\n            sarRatio = [32, 11];\n            break;\n          case 9:\n            sarRatio = [80, 33];\n            break;\n          case 10:\n            sarRatio = [18, 11];\n            break;\n          case 11:\n            sarRatio = [15, 11];\n            break;\n          case 12:\n            sarRatio = [64, 33];\n            break;\n          case 13:\n            sarRatio = [160, 99];\n            break;\n          case 14:\n            sarRatio = [4, 3];\n            break;\n          case 15:\n            sarRatio = [3, 2];\n            break;\n          case 16:\n            sarRatio = [2, 1];\n            break;\n          case 255:\n            {\n              sarRatio = [expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte(), expGolombDecoder.readUnsignedByte() << 8 | expGolombDecoder.readUnsignedByte()];\n              break;\n            }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil(((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2\n    };\n  };\n};\nH264Stream.prototype = new Stream();\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};","map":{"version":3,"names":["Stream","require","ExpGolomb","H264Stream","NalByteStream","PROFILES_WITH_OPTIONAL_SPS_DATA","syncPoint","i","buffer","prototype","init","call","push","data","swapBuffer","Uint8Array","byteLength","set","trigger","subarray","length","flush","nalByteStream","self","trackId","currentPts","currentDts","discardEmulationPreventionBytes","readSequenceParameterSet","skipScalingList","packet","type","pts","dts","on","event","nalUnitType","escapedRBSP","config","count","expGolombDecoder","lastScale","nextScale","j","deltaScale","readExpGolomb","emulationPreventionBytesPositions","newLength","newData","sourceIndex","shift","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","sarScale","profileIdc","levelIdc","profileCompatibility","chromaFormatIdc","picOrderCntType","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","sarRatio","aspectRatioIdc","readUnsignedByte","skipUnsignedExpGolomb","readUnsignedExpGolomb","skipBits","readBoolean","skipExpGolomb","readBits","width","Math","ceil","height","module","exports"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-media-sources/node_modules/mux.js/lib/codecs/h264.js"],"sourcesContent":["'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar ExpGolomb = require('../utils/exp-golomb.js');\n\nvar H264Stream, NalByteStream;\nvar PROFILES_WITH_OPTIONAL_SPS_DATA;\n\n/**\n * Accepts a NAL unit byte stream and unpacks the embedded NAL units.\n */\nNalByteStream = function() {\n  var\n    syncPoint = 0,\n    i,\n    buffer;\n  NalByteStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    var swapBuffer;\n\n    if (!buffer) {\n      buffer = data.data;\n    } else {\n      swapBuffer = new Uint8Array(buffer.byteLength + data.data.byteLength);\n      swapBuffer.set(buffer);\n      swapBuffer.set(data.data, buffer.byteLength);\n      buffer = swapBuffer;\n    }\n\n    // Rec. ITU-T H.264, Annex B\n    // scan for NAL unit boundaries\n\n    // a match looks like this:\n    // 0 0 1 .. NAL .. 0 0 1\n    // ^ sync point        ^ i\n    // or this:\n    // 0 0 1 .. NAL .. 0 0 0\n    // ^ sync point        ^ i\n\n    // advance the sync point to a NAL start, if necessary\n    for (; syncPoint < buffer.byteLength - 3; syncPoint++) {\n      if (buffer[syncPoint + 2] === 1) {\n        // the sync point is properly aligned\n        i = syncPoint + 5;\n        break;\n      }\n    }\n\n    while (i < buffer.byteLength) {\n      // look at the current byte to determine if we've hit the end of\n      // a NAL unit boundary\n      switch (buffer[i]) {\n      case 0:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0) {\n          i += 2;\n          break;\n        } else if (buffer[i - 2] !== 0) {\n          i++;\n          break;\n        }\n\n        // deliver the NAL unit if it isn't empty\n        if (syncPoint + 3 !== i - 2) {\n          this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        }\n\n        // drop trailing zeroes\n        do {\n          i++;\n        } while (buffer[i] !== 1 && i < buffer.length);\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (buffer[i - 1] !== 0 ||\n            buffer[i - 2] !== 0) {\n          i += 3;\n          break;\n        }\n\n        // deliver the NAL unit\n        this.trigger('data', buffer.subarray(syncPoint + 3, i - 2));\n        syncPoint = i - 2;\n        i += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        i += 3;\n        break;\n      }\n    }\n    // filter out the NAL units that were delivered\n    buffer = buffer.subarray(syncPoint);\n    i -= syncPoint;\n    syncPoint = 0;\n  };\n\n  this.flush = function() {\n    // deliver the last buffered NAL unit\n    if (buffer && buffer.byteLength > 3) {\n      this.trigger('data', buffer.subarray(syncPoint + 3));\n    }\n    // reset the stream state\n    buffer = null;\n    syncPoint = 0;\n    this.trigger('done');\n  };\n};\nNalByteStream.prototype = new Stream();\n\n// values of profile_idc that indicate additional fields are included in the SPS\n// see Recommendation ITU-T H.264 (4/2013),\n// 7.3.2.1.1 Sequence parameter set data syntax\nPROFILES_WITH_OPTIONAL_SPS_DATA = {\n  100: true,\n  110: true,\n  122: true,\n  244: true,\n  44: true,\n  83: true,\n  86: true,\n  118: true,\n  128: true,\n  138: true,\n  139: true,\n  134: true\n};\n\n/**\n * Accepts input from a ElementaryStream and produces H.264 NAL unit data\n * events.\n */\nH264Stream = function() {\n  var\n    nalByteStream = new NalByteStream(),\n    self,\n    trackId,\n    currentPts,\n    currentDts,\n\n    discardEmulationPreventionBytes,\n    readSequenceParameterSet,\n    skipScalingList;\n\n  H264Stream.prototype.init.call(this);\n  self = this;\n\n  this.push = function(packet) {\n    if (packet.type !== 'video') {\n      return;\n    }\n    trackId = packet.trackId;\n    currentPts = packet.pts;\n    currentDts = packet.dts;\n\n    nalByteStream.push(packet);\n  };\n\n  nalByteStream.on('data', function(data) {\n    var\n      event = {\n        trackId: trackId,\n        pts: currentPts,\n        dts: currentDts,\n        data: data\n      };\n\n    switch (data[0] & 0x1f) {\n    case 0x05:\n      event.nalUnitType = 'slice_layer_without_partitioning_rbsp_idr';\n      break;\n    case 0x06:\n      event.nalUnitType = 'sei_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      break;\n    case 0x07:\n      event.nalUnitType = 'seq_parameter_set_rbsp';\n      event.escapedRBSP = discardEmulationPreventionBytes(data.subarray(1));\n      event.config = readSequenceParameterSet(event.escapedRBSP);\n      break;\n    case 0x08:\n      event.nalUnitType = 'pic_parameter_set_rbsp';\n      break;\n    case 0x09:\n      event.nalUnitType = 'access_unit_delimiter_rbsp';\n      break;\n\n    default:\n      break;\n    }\n    self.trigger('data', event);\n  });\n  nalByteStream.on('done', function() {\n    self.trigger('done');\n  });\n\n  this.flush = function() {\n    nalByteStream.flush();\n  };\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @param expGolombDecoder {object} an ExpGolomb pointed to the\n   * start of a scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList = function(count, expGolombDecoder) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = expGolombDecoder.readExpGolomb();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  };\n\n  /**\n   * Expunge any \"Emulation Prevention\" bytes from a \"Raw Byte\n   * Sequence Payload\"\n   * @param data {Uint8Array} the bytes of a RBSP from a NAL\n   * unit\n   * @return {Uint8Array} the RBSP without any Emulation\n   * Prevention Bytes\n   */\n  discardEmulationPreventionBytes = function(data) {\n    var\n      length = data.byteLength,\n      emulationPreventionBytesPositions = [],\n      i = 1,\n      newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 0x03) {\n        emulationPreventionBytesPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (emulationPreventionBytesPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - emulationPreventionBytesPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === emulationPreventionBytesPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        emulationPreventionBytesPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n\n    return newData;\n  };\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSequenceParameterSet = function(data) {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      sarScale = 1,\n      expGolombDecoder, profileIdc, levelIdc, profileCompatibility,\n      chromaFormatIdc, picOrderCntType,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      sarRatio,\n      aspectRatioIdc,\n      i;\n\n    expGolombDecoder = new ExpGolomb(data);\n    profileIdc = expGolombDecoder.readUnsignedByte(); // profile_idc\n    profileCompatibility = expGolombDecoder.readUnsignedByte(); // constraint_set[0-5]_flag\n    levelIdc = expGolombDecoder.readUnsignedByte(); // level_idc u(8)\n    expGolombDecoder.skipUnsignedExpGolomb(); // seq_parameter_set_id\n\n    // some profiles have more optional data we don't need\n    if (PROFILES_WITH_OPTIONAL_SPS_DATA[profileIdc]) {\n      chromaFormatIdc = expGolombDecoder.readUnsignedExpGolomb();\n      if (chromaFormatIdc === 3) {\n        expGolombDecoder.skipBits(1); // separate_colour_plane_flag\n      }\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_luma_minus8\n      expGolombDecoder.skipUnsignedExpGolomb(); // bit_depth_chroma_minus8\n      expGolombDecoder.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (expGolombDecoder.readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (expGolombDecoder.readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16, expGolombDecoder);\n            } else {\n              skipScalingList(64, expGolombDecoder);\n            }\n          }\n        }\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // log2_max_frame_num_minus4\n    picOrderCntType = expGolombDecoder.readUnsignedExpGolomb();\n\n    if (picOrderCntType === 0) {\n      expGolombDecoder.readUnsignedExpGolomb(); // log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      expGolombDecoder.skipBits(1); // delta_pic_order_always_zero_flag\n      expGolombDecoder.skipExpGolomb(); // offset_for_non_ref_pic\n      expGolombDecoder.skipExpGolomb(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = expGolombDecoder.readUnsignedExpGolomb();\n      for (i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        expGolombDecoder.skipExpGolomb(); // offset_for_ref_frame[ i ]\n      }\n    }\n\n    expGolombDecoder.skipUnsignedExpGolomb(); // max_num_ref_frames\n    expGolombDecoder.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n    picWidthInMbsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n    picHeightInMapUnitsMinus1 = expGolombDecoder.readUnsignedExpGolomb();\n\n    frameMbsOnlyFlag = expGolombDecoder.readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      expGolombDecoder.skipBits(1); // mb_adaptive_frame_field_flag\n    }\n\n    expGolombDecoder.skipBits(1); // direct_8x8_inference_flag\n    if (expGolombDecoder.readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropRightOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropTopOffset = expGolombDecoder.readUnsignedExpGolomb();\n      frameCropBottomOffset = expGolombDecoder.readUnsignedExpGolomb();\n    }\n    if (expGolombDecoder.readBoolean()) {\n      // vui_parameters_present_flag\n      if (expGolombDecoder.readBoolean()) {\n        // aspect_ratio_info_present_flag\n        aspectRatioIdc = expGolombDecoder.readUnsignedByte();\n        switch (aspectRatioIdc) {\n          case 1: sarRatio = [1, 1]; break;\n          case 2: sarRatio = [12, 11]; break;\n          case 3: sarRatio = [10, 11]; break;\n          case 4: sarRatio = [16, 11]; break;\n          case 5: sarRatio = [40, 33]; break;\n          case 6: sarRatio = [24, 11]; break;\n          case 7: sarRatio = [20, 11]; break;\n          case 8: sarRatio = [32, 11]; break;\n          case 9: sarRatio = [80, 33]; break;\n          case 10: sarRatio = [18, 11]; break;\n          case 11: sarRatio = [15, 11]; break;\n          case 12: sarRatio = [64, 33]; break;\n          case 13: sarRatio = [160, 99]; break;\n          case 14: sarRatio = [4, 3]; break;\n          case 15: sarRatio = [3, 2]; break;\n          case 16: sarRatio = [2, 1]; break;\n          case 255: {\n            sarRatio = [expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte(),\n                        expGolombDecoder.readUnsignedByte() << 8 |\n                        expGolombDecoder.readUnsignedByte() ];\n            break;\n          }\n        }\n        if (sarRatio) {\n          sarScale = sarRatio[0] / sarRatio[1];\n        }\n      }\n    }\n    return {\n      profileIdc: profileIdc,\n      levelIdc: levelIdc,\n      profileCompatibility: profileCompatibility,\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2) * sarScale),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - (frameCropTopOffset * 2) - (frameCropBottomOffset * 2)\n    };\n  };\n\n};\nH264Stream.prototype = new Stream();\n\nmodule.exports = {\n  H264Stream: H264Stream,\n  NalByteStream: NalByteStream\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAC1C,IAAIC,SAAS,GAAGD,OAAO,CAAC,wBAAwB,CAAC;AAEjD,IAAIE,UAAU,EAAEC,aAAa;AAC7B,IAAIC,+BAA+B;;AAEnC;AACA;AACA;AACAD,aAAa,GAAG,SAAAA,CAAA,EAAW;EACzB,IACEE,SAAS,GAAG,CAAC;IACbC,CAAC;IACDC,MAAM;EACRJ,aAAa,CAACK,SAAS,CAACC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;EAEvC,IAAI,CAACC,IAAI,GAAG,UAASC,IAAI,EAAE;IACzB,IAAIC,UAAU;IAEd,IAAI,CAACN,MAAM,EAAE;MACXA,MAAM,GAAGK,IAAI,CAACA,IAAI;IACpB,CAAC,MAAM;MACLC,UAAU,GAAG,IAAIC,UAAU,CAACP,MAAM,CAACQ,UAAU,GAAGH,IAAI,CAACA,IAAI,CAACG,UAAU,CAAC;MACrEF,UAAU,CAACG,GAAG,CAACT,MAAM,CAAC;MACtBM,UAAU,CAACG,GAAG,CAACJ,IAAI,CAACA,IAAI,EAAEL,MAAM,CAACQ,UAAU,CAAC;MAC5CR,MAAM,GAAGM,UAAU;IACrB;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,OAAOR,SAAS,GAAGE,MAAM,CAACQ,UAAU,GAAG,CAAC,EAAEV,SAAS,EAAE,EAAE;MACrD,IAAIE,MAAM,CAACF,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;QAC/B;QACAC,CAAC,GAAGD,SAAS,GAAG,CAAC;QACjB;MACF;IACF;IAEA,OAAOC,CAAC,GAAGC,MAAM,CAACQ,UAAU,EAAE;MAC5B;MACA;MACA,QAAQR,MAAM,CAACD,CAAC,CAAC;QACjB,KAAK,CAAC;UACJ;UACA,IAAIC,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YACvBA,CAAC,IAAI,CAAC;YACN;UACF,CAAC,MAAM,IAAIC,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YAC9BA,CAAC,EAAE;YACH;UACF;;UAEA;UACA,IAAID,SAAS,GAAG,CAAC,KAAKC,CAAC,GAAG,CAAC,EAAE;YAC3B,IAAI,CAACW,OAAO,CAAC,MAAM,EAAEV,MAAM,CAACW,QAAQ,CAACb,SAAS,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,CAAC;UAC7D;;UAEA;UACA,GAAG;YACDA,CAAC,EAAE;UACL,CAAC,QAAQC,MAAM,CAACD,CAAC,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAGC,MAAM,CAACY,MAAM;UAC7Cd,SAAS,GAAGC,CAAC,GAAG,CAAC;UACjBA,CAAC,IAAI,CAAC;UACN;QACF,KAAK,CAAC;UACJ;UACA,IAAIC,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IACnBC,MAAM,CAACD,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;YACvBA,CAAC,IAAI,CAAC;YACN;UACF;;UAEA;UACA,IAAI,CAACW,OAAO,CAAC,MAAM,EAAEV,MAAM,CAACW,QAAQ,CAACb,SAAS,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,CAAC,CAAC;UAC3DD,SAAS,GAAGC,CAAC,GAAG,CAAC;UACjBA,CAAC,IAAI,CAAC;UACN;QACF;UACE;UACA;UACAA,CAAC,IAAI,CAAC;UACN;MACF;IACF;IACA;IACAC,MAAM,GAAGA,MAAM,CAACW,QAAQ,CAACb,SAAS,CAAC;IACnCC,CAAC,IAAID,SAAS;IACdA,SAAS,GAAG,CAAC;EACf,CAAC;EAED,IAAI,CAACe,KAAK,GAAG,YAAW;IACtB;IACA,IAAIb,MAAM,IAAIA,MAAM,CAACQ,UAAU,GAAG,CAAC,EAAE;MACnC,IAAI,CAACE,OAAO,CAAC,MAAM,EAAEV,MAAM,CAACW,QAAQ,CAACb,SAAS,GAAG,CAAC,CAAC,CAAC;IACtD;IACA;IACAE,MAAM,GAAG,IAAI;IACbF,SAAS,GAAG,CAAC;IACb,IAAI,CAACY,OAAO,CAAC,MAAM,CAAC;EACtB,CAAC;AACH,CAAC;AACDd,aAAa,CAACK,SAAS,GAAG,IAAIT,MAAM,CAAC,CAAC;;AAEtC;AACA;AACA;AACAK,+BAA+B,GAAG;EAChC,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,EAAE,EAAE,IAAI;EACR,EAAE,EAAE,IAAI;EACR,EAAE,EAAE,IAAI;EACR,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE,IAAI;EACT,GAAG,EAAE;AACP,CAAC;;AAED;AACA;AACA;AACA;AACAF,UAAU,GAAG,SAAAA,CAAA,EAAW;EACtB,IACEmB,aAAa,GAAG,IAAIlB,aAAa,CAAC,CAAC;IACnCmB,IAAI;IACJC,OAAO;IACPC,UAAU;IACVC,UAAU;IAEVC,+BAA+B;IAC/BC,wBAAwB;IACxBC,eAAe;EAEjB1B,UAAU,CAACM,SAAS,CAACC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;EACpCY,IAAI,GAAG,IAAI;EAEX,IAAI,CAACX,IAAI,GAAG,UAASkB,MAAM,EAAE;IAC3B,IAAIA,MAAM,CAACC,IAAI,KAAK,OAAO,EAAE;MAC3B;IACF;IACAP,OAAO,GAAGM,MAAM,CAACN,OAAO;IACxBC,UAAU,GAAGK,MAAM,CAACE,GAAG;IACvBN,UAAU,GAAGI,MAAM,CAACG,GAAG;IAEvBX,aAAa,CAACV,IAAI,CAACkB,MAAM,CAAC;EAC5B,CAAC;EAEDR,aAAa,CAACY,EAAE,CAAC,MAAM,EAAE,UAASrB,IAAI,EAAE;IACtC,IACEsB,KAAK,GAAG;MACNX,OAAO,EAAEA,OAAO;MAChBQ,GAAG,EAAEP,UAAU;MACfQ,GAAG,EAAEP,UAAU;MACfb,IAAI,EAAEA;IACR,CAAC;IAEH,QAAQA,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;MACtB,KAAK,IAAI;QACPsB,KAAK,CAACC,WAAW,GAAG,2CAA2C;QAC/D;MACF,KAAK,IAAI;QACPD,KAAK,CAACC,WAAW,GAAG,UAAU;QAC9BD,KAAK,CAACE,WAAW,GAAGV,+BAA+B,CAACd,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrE;MACF,KAAK,IAAI;QACPgB,KAAK,CAACC,WAAW,GAAG,wBAAwB;QAC5CD,KAAK,CAACE,WAAW,GAAGV,+BAA+B,CAACd,IAAI,CAACM,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrEgB,KAAK,CAACG,MAAM,GAAGV,wBAAwB,CAACO,KAAK,CAACE,WAAW,CAAC;QAC1D;MACF,KAAK,IAAI;QACPF,KAAK,CAACC,WAAW,GAAG,wBAAwB;QAC5C;MACF,KAAK,IAAI;QACPD,KAAK,CAACC,WAAW,GAAG,4BAA4B;QAChD;MAEF;QACE;IACF;IACAb,IAAI,CAACL,OAAO,CAAC,MAAM,EAAEiB,KAAK,CAAC;EAC7B,CAAC,CAAC;EACFb,aAAa,CAACY,EAAE,CAAC,MAAM,EAAE,YAAW;IAClCX,IAAI,CAACL,OAAO,CAAC,MAAM,CAAC;EACtB,CAAC,CAAC;EAEF,IAAI,CAACG,KAAK,GAAG,YAAW;IACtBC,aAAa,CAACD,KAAK,CAAC,CAAC;EACvB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,eAAe,GAAG,SAAAA,CAASU,KAAK,EAAEC,gBAAgB,EAAE;IAClD,IACEC,SAAS,GAAG,CAAC;MACbC,SAAS,GAAG,CAAC;MACbC,CAAC;MACDC,UAAU;IAEZ,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;MAC1B,IAAID,SAAS,KAAK,CAAC,EAAE;QACnBE,UAAU,GAAGJ,gBAAgB,CAACK,aAAa,CAAC,CAAC;QAC7CH,SAAS,GAAG,CAACD,SAAS,GAAGG,UAAU,GAAG,GAAG,IAAI,GAAG;MAClD;MAEAH,SAAS,GAAIC,SAAS,KAAK,CAAC,GAAID,SAAS,GAAGC,SAAS;IACvD;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEf,+BAA+B,GAAG,SAAAA,CAASd,IAAI,EAAE;IAC/C,IACEO,MAAM,GAAGP,IAAI,CAACG,UAAU;MACxB8B,iCAAiC,GAAG,EAAE;MACtCvC,CAAC,GAAG,CAAC;MACLwC,SAAS;MAAEC,OAAO;;IAEpB;IACA,OAAOzC,CAAC,GAAGa,MAAM,GAAG,CAAC,EAAE;MACrB,IAAIP,IAAI,CAACN,CAAC,CAAC,KAAK,CAAC,IAAIM,IAAI,CAACN,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,IAAIM,IAAI,CAACN,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;QAC9DuC,iCAAiC,CAAClC,IAAI,CAACL,CAAC,GAAG,CAAC,CAAC;QAC7CA,CAAC,IAAI,CAAC;MACR,CAAC,MAAM;QACLA,CAAC,EAAE;MACL;IACF;;IAEA;IACA;IACA,IAAIuC,iCAAiC,CAAC1B,MAAM,KAAK,CAAC,EAAE;MAClD,OAAOP,IAAI;IACb;;IAEA;IACAkC,SAAS,GAAG3B,MAAM,GAAG0B,iCAAiC,CAAC1B,MAAM;IAC7D4B,OAAO,GAAG,IAAIjC,UAAU,CAACgC,SAAS,CAAC;IACnC,IAAIE,WAAW,GAAG,CAAC;IAEnB,KAAK1C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwC,SAAS,EAAEE,WAAW,EAAE,EAAE1C,CAAC,EAAE,EAAE;MAC7C,IAAI0C,WAAW,KAAKH,iCAAiC,CAAC,CAAC,CAAC,EAAE;QACxD;QACAG,WAAW,EAAE;QACb;QACAH,iCAAiC,CAACI,KAAK,CAAC,CAAC;MAC3C;MACAF,OAAO,CAACzC,CAAC,CAAC,GAAGM,IAAI,CAACoC,WAAW,CAAC;IAChC;IAEA,OAAOD,OAAO;EAChB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEpB,wBAAwB,GAAG,SAAAA,CAASf,IAAI,EAAE;IACxC,IACEsC,mBAAmB,GAAG,CAAC;MACvBC,oBAAoB,GAAG,CAAC;MACxBC,kBAAkB,GAAG,CAAC;MACtBC,qBAAqB,GAAG,CAAC;MACzBC,QAAQ,GAAG,CAAC;MACZf,gBAAgB;MAAEgB,UAAU;MAAEC,QAAQ;MAAEC,oBAAoB;MAC5DC,eAAe;MAAEC,eAAe;MAChCC,8BAA8B;MAAEC,mBAAmB;MACnDC,yBAAyB;MACzBC,gBAAgB;MAChBC,gBAAgB;MAChBC,QAAQ;MACRC,cAAc;MACd5D,CAAC;IAEHiC,gBAAgB,GAAG,IAAItC,SAAS,CAACW,IAAI,CAAC;IACtC2C,UAAU,GAAGhB,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAClDV,oBAAoB,GAAGlB,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC5DX,QAAQ,GAAGjB,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAChD5B,gBAAgB,CAAC6B,qBAAqB,CAAC,CAAC,CAAC,CAAC;;IAE1C;IACA,IAAIhE,+BAA+B,CAACmD,UAAU,CAAC,EAAE;MAC/CG,eAAe,GAAGnB,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;MAC1D,IAAIX,eAAe,KAAK,CAAC,EAAE;QACzBnB,gBAAgB,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MAChC;MACA/B,gBAAgB,CAAC6B,qBAAqB,CAAC,CAAC,CAAC,CAAC;MAC1C7B,gBAAgB,CAAC6B,qBAAqB,CAAC,CAAC,CAAC,CAAC;MAC1C7B,gBAAgB,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B,IAAI/B,gBAAgB,CAACgC,WAAW,CAAC,CAAC,EAAE;QAAE;QACpCP,gBAAgB,GAAIN,eAAe,KAAK,CAAC,GAAI,CAAC,GAAG,EAAE;QACnD,KAAKpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0D,gBAAgB,EAAE1D,CAAC,EAAE,EAAE;UACrC,IAAIiC,gBAAgB,CAACgC,WAAW,CAAC,CAAC,EAAE;YAAE;YACpC,IAAIjE,CAAC,GAAG,CAAC,EAAE;cACTsB,eAAe,CAAC,EAAE,EAAEW,gBAAgB,CAAC;YACvC,CAAC,MAAM;cACLX,eAAe,CAAC,EAAE,EAAEW,gBAAgB,CAAC;YACvC;UACF;QACF;MACF;IACF;IAEAA,gBAAgB,CAAC6B,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC1CT,eAAe,GAAGpB,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;IAE1D,IAAIV,eAAe,KAAK,CAAC,EAAE;MACzBpB,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,MAAM,IAAIV,eAAe,KAAK,CAAC,EAAE;MAChCpB,gBAAgB,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9B/B,gBAAgB,CAACiC,aAAa,CAAC,CAAC,CAAC,CAAC;MAClCjC,gBAAgB,CAACiC,aAAa,CAAC,CAAC,CAAC,CAAC;MAClCZ,8BAA8B,GAAGrB,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;MACzE,KAAK/D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsD,8BAA8B,EAAEtD,CAAC,EAAE,EAAE;QACnDiC,gBAAgB,CAACiC,aAAa,CAAC,CAAC,CAAC,CAAC;MACpC;IACF;IAEAjC,gBAAgB,CAAC6B,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAC1C7B,gBAAgB,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE9BT,mBAAmB,GAAGtB,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;IAC9DP,yBAAyB,GAAGvB,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;IAEpEN,gBAAgB,GAAGxB,gBAAgB,CAACkC,QAAQ,CAAC,CAAC,CAAC;IAC/C,IAAIV,gBAAgB,KAAK,CAAC,EAAE;MAC1BxB,gBAAgB,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC;IAEA/B,gBAAgB,CAAC+B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI/B,gBAAgB,CAACgC,WAAW,CAAC,CAAC,EAAE;MAAE;MACpCrB,mBAAmB,GAAGX,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;MAC9DlB,oBAAoB,GAAGZ,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;MAC/DjB,kBAAkB,GAAGb,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;MAC7DhB,qBAAqB,GAAGd,gBAAgB,CAAC8B,qBAAqB,CAAC,CAAC;IAClE;IACA,IAAI9B,gBAAgB,CAACgC,WAAW,CAAC,CAAC,EAAE;MAClC;MACA,IAAIhC,gBAAgB,CAACgC,WAAW,CAAC,CAAC,EAAE;QAClC;QACAL,cAAc,GAAG3B,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC;QACpD,QAAQD,cAAc;UACpB,KAAK,CAAC;YAAED,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAAE;UAC3B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,CAAC;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC7B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC9B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC9B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;YAAE;UAC9B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC;YAAE;UAC/B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAAE;UAC5B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAAE;UAC5B,KAAK,EAAE;YAAEA,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;YAAE;UAC5B,KAAK,GAAG;YAAE;cACRA,QAAQ,GAAG,CAAC1B,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,IAAI,CAAC,GACxC5B,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,EACnC5B,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,IAAI,CAAC,GACxC5B,gBAAgB,CAAC4B,gBAAgB,CAAC,CAAC,CAAE;cACjD;YACF;QACF;QACA,IAAIF,QAAQ,EAAE;UACZX,QAAQ,GAAGW,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC;QACtC;MACF;IACF;IACA,OAAO;MACLV,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA,QAAQ;MAClBC,oBAAoB,EAAEA,oBAAoB;MAC1CiB,KAAK,EAAEC,IAAI,CAACC,IAAI,CAAC,CAAE,CAACf,mBAAmB,GAAG,CAAC,IAAI,EAAE,GAAIX,mBAAmB,GAAG,CAAC,GAAGC,oBAAoB,GAAG,CAAC,IAAIG,QAAQ,CAAC;MACpHuB,MAAM,EAAG,CAAC,CAAC,GAAGd,gBAAgB,KAAKD,yBAAyB,GAAG,CAAC,CAAC,GAAG,EAAE,GAAKV,kBAAkB,GAAG,CAAE,GAAIC,qBAAqB,GAAG;IAChI,CAAC;EACH,CAAC;AAEH,CAAC;AACDnD,UAAU,CAACM,SAAS,GAAG,IAAIT,MAAM,CAAC,CAAC;AAEnC+E,MAAM,CAACC,OAAO,GAAG;EACf7E,UAAU,EAAEA,UAAU;EACtBC,aAAa,EAAEA;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}