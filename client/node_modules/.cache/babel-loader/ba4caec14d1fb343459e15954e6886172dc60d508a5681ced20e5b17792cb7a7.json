{"ast":null,"code":"/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\nvar _aes = require('./aes');\nvar _aes2 = _interopRequireDefault(_aes);\nvar _asyncStream = require('./async-stream');\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n  return decrypted;\n};\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n  return Decrypter;\n}();\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_interopRequireDefault","obj","__esModule","_classCallCheck","instance","TypeError","_aes","require","_aes2","_asyncStream","_asyncStream2","_pkcs7","ntoh","word","decrypt","encrypted","initVector","encrypted32","Int32Array","buffer","byteOffset","byteLength","decipher","Array","slice","call","decrypted","Uint8Array","decrypted32","init0","undefined","init1","init2","init3","encrypted0","encrypted1","encrypted2","encrypted3","wordIx","Decrypter","done","step","STEP","asyncStream_","push","decryptChunk_","subarray","Uint32Array","unpad","bytes","set","get"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-hls/node_modules/aes-decrypter/es5/decrypter.js"],"sourcesContent":["/**\n * @file decrypter.js\n *\n * An asynchronous implementation of AES-128 CBC decryption with\n * PKCS#7 padding.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _aes = require('./aes');\n\nvar _aes2 = _interopRequireDefault(_aes);\n\nvar _asyncStream = require('./async-stream');\n\nvar _asyncStream2 = _interopRequireDefault(_asyncStream);\n\nvar _pkcs7 = require('pkcs7');\n\n/**\n * Convert network-order (big-endian) bytes into their little-endian\n * representation.\n */\nvar ntoh = function ntoh(word) {\n  return word << 24 | (word & 0xff00) << 8 | (word & 0xff0000) >> 8 | word >>> 24;\n};\n\n/**\n * Decrypt bytes using AES-128 with CBC and PKCS#7 padding.\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * use for the first round of CBC.\n * @return {Uint8Array} the decrypted bytes\n *\n * @see http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\n * @see http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher_Block_Chaining_.28CBC.29\n * @see https://tools.ietf.org/html/rfc2315\n */\nvar decrypt = function decrypt(encrypted, key, initVector) {\n  // word-level access to the encrypted bytes\n  var encrypted32 = new Int32Array(encrypted.buffer, encrypted.byteOffset, encrypted.byteLength >> 2);\n\n  var decipher = new _aes2['default'](Array.prototype.slice.call(key));\n\n  // byte and word-level access for the decrypted output\n  var decrypted = new Uint8Array(encrypted.byteLength);\n  var decrypted32 = new Int32Array(decrypted.buffer);\n\n  // temporary variables for working with the IV, encrypted, and\n  // decrypted data\n  var init0 = undefined;\n  var init1 = undefined;\n  var init2 = undefined;\n  var init3 = undefined;\n  var encrypted0 = undefined;\n  var encrypted1 = undefined;\n  var encrypted2 = undefined;\n  var encrypted3 = undefined;\n\n  // iteration variable\n  var wordIx = undefined;\n\n  // pull out the words of the IV to ensure we don't modify the\n  // passed-in reference and easier access\n  init0 = initVector[0];\n  init1 = initVector[1];\n  init2 = initVector[2];\n  init3 = initVector[3];\n\n  // decrypt four word sequences, applying cipher-block chaining (CBC)\n  // to each decrypted block\n  for (wordIx = 0; wordIx < encrypted32.length; wordIx += 4) {\n    // convert big-endian (network order) words into little-endian\n    // (javascript order)\n    encrypted0 = ntoh(encrypted32[wordIx]);\n    encrypted1 = ntoh(encrypted32[wordIx + 1]);\n    encrypted2 = ntoh(encrypted32[wordIx + 2]);\n    encrypted3 = ntoh(encrypted32[wordIx + 3]);\n\n    // decrypt the block\n    decipher.decrypt(encrypted0, encrypted1, encrypted2, encrypted3, decrypted32, wordIx);\n\n    // XOR with the IV, and restore network byte-order to obtain the\n    // plaintext\n    decrypted32[wordIx] = ntoh(decrypted32[wordIx] ^ init0);\n    decrypted32[wordIx + 1] = ntoh(decrypted32[wordIx + 1] ^ init1);\n    decrypted32[wordIx + 2] = ntoh(decrypted32[wordIx + 2] ^ init2);\n    decrypted32[wordIx + 3] = ntoh(decrypted32[wordIx + 3] ^ init3);\n\n    // setup the IV for the next round\n    init0 = encrypted0;\n    init1 = encrypted1;\n    init2 = encrypted2;\n    init3 = encrypted3;\n  }\n\n  return decrypted;\n};\n\nexports.decrypt = decrypt;\n/**\n * The `Decrypter` class that manages decryption of AES\n * data through `AsyncStream` objects and the `decrypt`\n * function\n *\n * @param {Uint8Array} encrypted the encrypted bytes\n * @param {Uint32Array} key the bytes of the decryption key\n * @param {Uint32Array} initVector the initialization vector (IV) to\n * @param {Function} done the function to run when done\n * @class Decrypter\n */\n\nvar Decrypter = (function () {\n  function Decrypter(encrypted, key, initVector, done) {\n    _classCallCheck(this, Decrypter);\n\n    var step = Decrypter.STEP;\n    var encrypted32 = new Int32Array(encrypted.buffer);\n    var decrypted = new Uint8Array(encrypted.byteLength);\n    var i = 0;\n\n    this.asyncStream_ = new _asyncStream2['default']();\n\n    // split up the encryption job and do the individual chunks asynchronously\n    this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    for (i = step; i < encrypted32.length; i += step) {\n      initVector = new Uint32Array([ntoh(encrypted32[i - 4]), ntoh(encrypted32[i - 3]), ntoh(encrypted32[i - 2]), ntoh(encrypted32[i - 1])]);\n      this.asyncStream_.push(this.decryptChunk_(encrypted32.subarray(i, i + step), key, initVector, decrypted));\n    }\n    // invoke the done() callback when everything is finished\n    this.asyncStream_.push(function () {\n      // remove pkcs#7 padding from the decrypted bytes\n      done(null, (0, _pkcs7.unpad)(decrypted));\n    });\n  }\n\n  /**\n   * a getter for step the maximum number of bytes to process at one time\n   *\n   * @return {Number} the value of step 32000\n   */\n\n  _createClass(Decrypter, [{\n    key: 'decryptChunk_',\n\n    /**\n     * @private\n     */\n    value: function decryptChunk_(encrypted, key, initVector, decrypted) {\n      return function () {\n        var bytes = decrypt(encrypted, key, initVector);\n\n        decrypted.set(bytes, encrypted.byteOffset);\n      };\n    }\n  }], [{\n    key: 'STEP',\n    get: function get() {\n      // 4 * 8000;\n      return 32000;\n    }\n  }]);\n\n  return Decrypter;\n})();\n\nexports.Decrypter = Decrypter;\nexports['default'] = {\n  Decrypter: Decrypter,\n  decrypt: decrypt\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}