{"ast":null,"code":"/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar _globalWindow = require('global/window');\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\nvar _flashMediaSource = require('./flash-media-source');\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\nvar _htmlMediaSource = require('./html-media-source');\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\nvar _videoJs = require('video.js');\nvar _videoJs2 = _interopRequireDefault(_videoJs);\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n  if (mediaSource) {\n    mediaSource.trigger({\n      type: 'sourceopen',\n      swfId: swfId\n    });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n    return url;\n  }\n};\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;","map":{"version":3,"names":["Object","defineProperty","exports","value","_interopRequireDefault","obj","__esModule","_globalWindow","require","_globalWindow2","_flashMediaSource","_flashMediaSource2","_htmlMediaSource","_htmlMediaSource2","_videoJs","_videoJs2","urlCount","defaults","mode","mediaSources","open","msObjectURL","swfId","mediaSource","trigger","type","Error","supportsNativeMediaSources","MediaSource","isTypeSupported","options","settings","mergeOptions","getTech","URL","createObjectURL","object","objectUrlPrefix","url","undefined","nativeMediaSource_","url_"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-media-sources/es5/videojs-contrib-media-sources.js"],"sourcesContent":["/**\n * @file videojs-contrib-media-sources.js\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _flashMediaSource = require('./flash-media-source');\n\nvar _flashMediaSource2 = _interopRequireDefault(_flashMediaSource);\n\nvar _htmlMediaSource = require('./html-media-source');\n\nvar _htmlMediaSource2 = _interopRequireDefault(_htmlMediaSource);\n\nvar _videoJs = require('video.js');\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar urlCount = 0;\n\n// ------------\n// Media Source\n// ------------\n\nvar defaults = {\n  // how to determine the MediaSource implementation to use. There\n  // are three available modes:\n  // - auto: use native MediaSources where available and Flash\n  //   everywhere else\n  // - html5: always use native MediaSources\n  // - flash: always use the Flash MediaSource polyfill\n  mode: 'auto'\n};\n\n// store references to the media sources so they can be connected\n// to a video element (a swf object)\n// TODO: can we store this somewhere local to this module?\n_videoJs2['default'].mediaSources = {};\n\n/**\n * Provide a method for a swf object to notify JS that a\n * media source is now open.\n *\n * @param {String} msObjectURL string referencing the MSE Object URL\n * @param {String} swfId the swf id\n */\nvar open = function open(msObjectURL, swfId) {\n  var mediaSource = _videoJs2['default'].mediaSources[msObjectURL];\n\n  if (mediaSource) {\n    mediaSource.trigger({ type: 'sourceopen', swfId: swfId });\n  } else {\n    throw new Error('Media Source not found (Video.js)');\n  }\n};\n\n/**\n * Check to see if the native MediaSource object exists and supports\n * an MP4 container with both H.264 video and AAC-LC audio.\n *\n * @return {Boolean} if  native media sources are supported\n */\nvar supportsNativeMediaSources = function supportsNativeMediaSources() {\n  return !!_globalWindow2['default'].MediaSource && !!_globalWindow2['default'].MediaSource.isTypeSupported && _globalWindow2['default'].MediaSource.isTypeSupported('video/mp4;codecs=\"avc1.4d400d,mp4a.40.2\"');\n};\n\n/**\n * An emulation of the MediaSource API so that we can support\n * native and non-native functionality such as flash and\n * video/mp2t videos. returns an instance of HtmlMediaSource or\n * FlashMediaSource depending on what is supported and what options\n * are passed in.\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource\n * @param {Object} options options to use during setup.\n */\nvar MediaSource = function MediaSource(options) {\n  var settings = _videoJs2['default'].mergeOptions(defaults, options);\n\n  this.MediaSource = {\n    open: open,\n    supportsNativeMediaSources: supportsNativeMediaSources\n  };\n\n  // determine whether HTML MediaSources should be used\n  if (settings.mode === 'html5' || settings.mode === 'auto' && supportsNativeMediaSources()) {\n    return new _htmlMediaSource2['default']();\n  } else if (_videoJs2['default'].getTech('Flash')) {\n    return new _flashMediaSource2['default']();\n  }\n\n  throw new Error('Cannot use Flash or Html5 to create a MediaSource for this video');\n};\n\nexports.MediaSource = MediaSource;\nMediaSource.open = open;\nMediaSource.supportsNativeMediaSources = supportsNativeMediaSources;\n\n/**\n * A wrapper around the native URL for our MSE object\n * implementation, this object is exposed under videojs.URL\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/URL\n */\nvar URL = {\n  /**\n   * A wrapper around the native createObjectURL for our objects.\n   * This function maps a native or emulated mediaSource to a blob\n   * url so that it can be loaded into video.js\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL\n   * @param {MediaSource} object the object to create a blob url to\n   */\n  createObjectURL: function createObjectURL(object) {\n    var objectUrlPrefix = 'blob:vjs-media-source/';\n    var url = undefined;\n\n    // use the native MediaSource to generate an object URL\n    if (object instanceof _htmlMediaSource2['default']) {\n      url = _globalWindow2['default'].URL.createObjectURL(object.nativeMediaSource_);\n      object.url_ = url;\n      return url;\n    }\n    // if the object isn't an emulated MediaSource, delegate to the\n    // native implementation\n    if (!(object instanceof _flashMediaSource2['default'])) {\n      url = _globalWindow2['default'].URL.createObjectURL(object);\n      object.url_ = url;\n      return url;\n    }\n\n    // build a URL that can be used to map back to the emulated\n    // MediaSource\n    url = objectUrlPrefix + urlCount;\n\n    urlCount++;\n\n    // setup the mapping back to object\n    _videoJs2['default'].mediaSources[url] = object;\n\n    return url;\n  }\n};\n\nexports.URL = URL;\n_videoJs2['default'].MediaSource = MediaSource;\n_videoJs2['default'].URL = URL;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}