{"ast":null,"code":"/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\nexports['default'] = utils;\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","textRange","range","i","start","end","formatHexString","e","toString","substring","length","formatAsciiString","String","fromCharCode","createTransferableMessage","message","transferable","keys","forEach","key","ArrayBuffer","isView","bytes","buffer","byteOffset","byteLength","initSegmentId","initSegment","byterange","Infinity","offset","resolvedUri","join","utils","hexDump","data","Array","prototype","slice","call","step","result","hex","undefined","ascii","j","map","tagDump","tag","textRanges","ranges","module"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-hls/es5/bin-utils.js"],"sourcesContent":["/**\n * @file bin-utils.js\n */\n\n/**\n * convert a TimeRange to text\n *\n * @param {TimeRange} range the timerange to use for conversion\n * @param {Number} i the iterator on the range to convert\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textRange = function textRange(range, i) {\n  return range.start(i) + '-' + range.end(i);\n};\n\n/**\n * format a number as hex string\n *\n * @param {Number} e The number\n * @param {Number} i the iterator\n */\nvar formatHexString = function formatHexString(e, i) {\n  var value = e.toString(16);\n\n  return '00'.substring(0, 2 - value.length) + value + (i % 2 ? ' ' : '');\n};\nvar formatAsciiString = function formatAsciiString(e) {\n  if (e >= 0x20 && e < 0x7e) {\n    return String.fromCharCode(e);\n  }\n  return '.';\n};\n\n/**\n * Creates an object for sending to a web worker modifying properties that are TypedArrays\n * into a new object with seperated properties for the buffer, byteOffset, and byteLength.\n *\n * @param {Object} message\n *        Object of properties and values to send to the web worker\n * @return {Object}\n *         Modified message with TypedArray values expanded\n * @function createTransferableMessage\n */\nvar createTransferableMessage = function createTransferableMessage(message) {\n  var transferable = {};\n\n  Object.keys(message).forEach(function (key) {\n    var value = message[key];\n\n    if (ArrayBuffer.isView(value)) {\n      transferable[key] = {\n        bytes: value.buffer,\n        byteOffset: value.byteOffset,\n        byteLength: value.byteLength\n      };\n    } else {\n      transferable[key] = value;\n    }\n  });\n\n  return transferable;\n};\n\n/**\n * Returns a unique string identifier for a media initialization\n * segment.\n */\nvar initSegmentId = function initSegmentId(initSegment) {\n  var byterange = initSegment.byterange || {\n    length: Infinity,\n    offset: 0\n  };\n\n  return [byterange.length, byterange.offset, initSegment.resolvedUri].join(',');\n};\n\n/**\n * utils to help dump binary data to the console\n */\nvar utils = {\n  hexDump: function hexDump(data) {\n    var bytes = Array.prototype.slice.call(data);\n    var step = 16;\n    var result = '';\n    var hex = undefined;\n    var ascii = undefined;\n\n    for (var j = 0; j < bytes.length / step; j++) {\n      hex = bytes.slice(j * step, j * step + step).map(formatHexString).join('');\n      ascii = bytes.slice(j * step, j * step + step).map(formatAsciiString).join('');\n      result += hex + ' ' + ascii + '\\n';\n    }\n    return result;\n  },\n  tagDump: function tagDump(tag) {\n    return utils.hexDump(tag.bytes);\n  },\n  textRanges: function textRanges(ranges) {\n    var result = '';\n    var i = undefined;\n\n    for (i = 0; i < ranges.length; i++) {\n      result += textRange(ranges, i) + ' ';\n    }\n    return result;\n  },\n  createTransferableMessage: createTransferableMessage,\n  initSegmentId: initSegmentId\n};\n\nexports['default'] = utils;\nmodule.exports = exports['default'];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}