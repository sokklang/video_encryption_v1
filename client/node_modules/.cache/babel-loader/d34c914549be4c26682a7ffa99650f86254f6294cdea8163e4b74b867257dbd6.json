{"ast":null,"code":"/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError('Cannot call a class as a function');\n  }\n}\nvar _globalWindow = require('global/window');\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\nvar _ranges = require('./ranges');\nvar _ranges2 = _interopRequireDefault(_ranges);\nvar _videoJs = require('video.js');\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n    _classCallCheck(this, PlaybackWatcher);\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + _ranges2['default'].SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var seekTo = undefined;\n      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        seekTo = seekableEnd;\n      }\n      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0);\n\n        // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n        seekTo = seekableStart + _ranges2['default'].SAFE_TIME_DELTA;\n      }\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n        this.tech_.setCurrentTime(seekTo);\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-unknown-waiting'\n        });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-live-resync'\n        });\n        return true;\n      }\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({\n          type: 'usage',\n          name: 'hls-video-underflow'\n        });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n      if (currentTime > seekable.end(seekable.length - 1) + _ranges2['default'].SAFE_TIME_DELTA) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - _ranges2['default'].SAFE_TIME_DELTA) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n      this.cancelTimer_();\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n      this.tech_.trigger({\n        type: 'usage',\n        name: 'hls-gap-skip'\n      });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n  return PlaybackWatcher;\n}();\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_interopRequireDefault","obj","__esModule","_classCallCheck","instance","TypeError","_globalWindow","require","_globalWindow2","_ranges","_ranges2","_videoJs","_videoJs2","timerCancelEvents","PlaybackWatcher","options","_this","tech_","tech","seekable","consecutiveUpdates","lastRecordedTime","timer_","checkCurrentTimeTimeout_","debug","logger_","log","bind","canPlayHandler","monitorCurrentTime_","waitingHandler","techWaiting_","cancelTimerHandler","cancelTimer_","fixesBadSeeksHandler","fixesBadSeeks_","on","dispose","off","clearTimeout","checkCurrentTime_","setTimeout","seeking","currentTime","paused","buffered","SAFE_TIME_DELTA","end","waiting_","seekTo","undefined","afterSeekableWindow_","seekableEnd","beforeSeekableWindow_","seekableStart","start","printableRange","setCurrentTime","currentRange","findRange","trigger","type","name","livePoint","nextRange","findNextRange","videoUnderflow_","difference","skipTheGap_","gap","gapFromVideoUnderflow_","scheduledCurrentTime","TIME_FUDGE_FACTOR","gaps","findGaps","module"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-hls/es5/playback-watcher.js"],"sourcesContent":["/**\n * @file playback-watcher.js\n *\n * Playback starts, and now my watch begins. It shall not end until my death. I shall\n * take no wait, hold no uncleared timeouts, father no bad seeks. I shall wear no crowns\n * and win no glory. I shall live and die at my post. I am the corrector of the underflow.\n * I am the watcher of gaps. I am the shield that guards the realms of seekable. I pledge\n * my life and honor to the Playback Watch, for this Player and all the Players to come.\n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _globalWindow = require('global/window');\n\nvar _globalWindow2 = _interopRequireDefault(_globalWindow);\n\nvar _ranges = require('./ranges');\n\nvar _ranges2 = _interopRequireDefault(_ranges);\n\nvar _videoJs = require('video.js');\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\n// Set of events that reset the playback-watcher time check logic and clear the timeout\nvar timerCancelEvents = ['seeking', 'seeked', 'pause', 'playing', 'error'];\n\n/**\n * @class PlaybackWatcher\n */\n\nvar PlaybackWatcher = (function () {\n  /**\n   * Represents an PlaybackWatcher object.\n   * @constructor\n   * @param {object} options an object that includes the tech and settings\n   */\n\n  function PlaybackWatcher(options) {\n    var _this = this;\n\n    _classCallCheck(this, PlaybackWatcher);\n\n    this.tech_ = options.tech;\n    this.seekable = options.seekable;\n\n    this.consecutiveUpdates = 0;\n    this.lastRecordedTime = null;\n    this.timer_ = null;\n    this.checkCurrentTimeTimeout_ = null;\n\n    if (options.debug) {\n      this.logger_ = _videoJs2['default'].log.bind(_videoJs2['default'], 'playback-watcher ->');\n    }\n    this.logger_('initialize');\n\n    var canPlayHandler = function canPlayHandler() {\n      return _this.monitorCurrentTime_();\n    };\n    var waitingHandler = function waitingHandler() {\n      return _this.techWaiting_();\n    };\n    var cancelTimerHandler = function cancelTimerHandler() {\n      return _this.cancelTimer_();\n    };\n    var fixesBadSeeksHandler = function fixesBadSeeksHandler() {\n      return _this.fixesBadSeeks_();\n    };\n\n    this.tech_.on('seekablechanged', fixesBadSeeksHandler);\n    this.tech_.on('waiting', waitingHandler);\n    this.tech_.on(timerCancelEvents, cancelTimerHandler);\n    this.tech_.on('canplay', canPlayHandler);\n\n    // Define the dispose function to clean up our events\n    this.dispose = function () {\n      _this.logger_('dispose');\n      _this.tech_.off('seekablechanged', fixesBadSeeksHandler);\n      _this.tech_.off('waiting', waitingHandler);\n      _this.tech_.off(timerCancelEvents, cancelTimerHandler);\n      _this.tech_.off('canplay', canPlayHandler);\n      if (_this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(_this.checkCurrentTimeTimeout_);\n      }\n      _this.cancelTimer_();\n    };\n  }\n\n  /**\n   * Periodically check current time to see if playback stopped\n   *\n   * @private\n   */\n\n  _createClass(PlaybackWatcher, [{\n    key: 'monitorCurrentTime_',\n    value: function monitorCurrentTime_() {\n      this.checkCurrentTime_();\n\n      if (this.checkCurrentTimeTimeout_) {\n        _globalWindow2['default'].clearTimeout(this.checkCurrentTimeTimeout_);\n      }\n\n      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15\n      this.checkCurrentTimeTimeout_ = _globalWindow2['default'].setTimeout(this.monitorCurrentTime_.bind(this), 250);\n    }\n\n    /**\n     * The purpose of this function is to emulate the \"waiting\" event on\n     * browsers that do not emit it when they are waiting for more\n     * data to continue playback\n     *\n     * @private\n     */\n  }, {\n    key: 'checkCurrentTime_',\n    value: function checkCurrentTime_() {\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = this.tech_.currentTime();\n        return;\n      }\n\n      if (this.tech_.paused() || this.tech_.seeking()) {\n        return;\n      }\n\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n\n      if (this.lastRecordedTime === currentTime && (!buffered.length || currentTime + _ranges2['default'].SAFE_TIME_DELTA >= buffered.end(buffered.length - 1))) {\n        // If current time is at the end of the final buffered region, then any playback\n        // stall is most likely caused by buffering in a low bandwidth environment. The tech\n        // should fire a `waiting` event in this scenario, but due to browser and tech\n        // inconsistencies (e.g. The Flash tech does not fire a `waiting` event when the end\n        // of the buffer is reached and has fallen off the live window). Calling\n        // `techWaiting_` here allows us to simulate responding to a native `waiting` event\n        // when the tech fails to emit one.\n        return this.techWaiting_();\n      }\n\n      if (this.consecutiveUpdates >= 5 && currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n        this.waiting_();\n      } else if (currentTime === this.lastRecordedTime) {\n        this.consecutiveUpdates++;\n      } else {\n        this.consecutiveUpdates = 0;\n        this.lastRecordedTime = currentTime;\n      }\n    }\n\n    /**\n     * Cancels any pending timers and resets the 'timeupdate' mechanism\n     * designed to detect that we are stalled\n     *\n     * @private\n     */\n  }, {\n    key: 'cancelTimer_',\n    value: function cancelTimer_() {\n      this.consecutiveUpdates = 0;\n\n      if (this.timer_) {\n        this.logger_('cancelTimer_');\n        clearTimeout(this.timer_);\n      }\n\n      this.timer_ = null;\n    }\n\n    /**\n     * Fixes situations where there's a bad seek\n     *\n     * @return {Boolean} whether an action was taken to fix the seek\n     * @private\n     */\n  }, {\n    key: 'fixesBadSeeks_',\n    value: function fixesBadSeeks_() {\n      var seeking = this.tech_.seeking();\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n      var seekTo = undefined;\n\n      if (seeking && this.afterSeekableWindow_(seekable, currentTime)) {\n        var seekableEnd = seekable.end(seekable.length - 1);\n\n        // sync to live point (if VOD, our seekable was updated and we're simply adjusting)\n        seekTo = seekableEnd;\n      }\n\n      if (seeking && this.beforeSeekableWindow_(seekable, currentTime)) {\n        var seekableStart = seekable.start(0);\n\n        // sync to the beginning of the live window\n        // provide a buffer of .1 seconds to handle rounding/imprecise numbers\n        seekTo = seekableStart + _ranges2['default'].SAFE_TIME_DELTA;\n      }\n\n      if (typeof seekTo !== 'undefined') {\n        this.logger_('Trying to seek outside of seekable at time ' + currentTime + ' with ' + ('seekable range ' + _ranges2['default'].printableRange(seekable) + '. Seeking to ') + (seekTo + '.'));\n\n        this.tech_.setCurrentTime(seekTo);\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Handler for situations when we determine the player is waiting.\n     *\n     * @private\n     */\n  }, {\n    key: 'waiting_',\n    value: function waiting_() {\n      if (this.techWaiting_()) {\n        return;\n      }\n\n      // All tech waiting checks failed. Use last resort correction\n      var currentTime = this.tech_.currentTime();\n      var buffered = this.tech_.buffered();\n      var currentRange = _ranges2['default'].findRange(buffered, currentTime);\n\n      // Sometimes the player can stall for unknown reasons within a contiguous buffered\n      // region with no indication that anything is amiss (seen in Firefox). Seeking to\n      // currentTime is usually enough to kickstart the player. This checks that the player\n      // is currently within a buffered region before attempting a corrective seek.\n      // Chrome does not appear to continue `timeupdate` events after a `waiting` event\n      // until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also\n      // make sure there is ~3 seconds of forward buffer before taking any corrective action\n      // to avoid triggering an `unknownwaiting` event when the network is slow.\n      if (currentRange.length && currentTime + 3 <= currentRange.end(0)) {\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        this.logger_('Stopped at ' + currentTime + ' while inside a buffered region ' + ('[' + currentRange.start(0) + ' -> ' + currentRange.end(0) + ']. Attempting to resume ') + 'playback by seeking to the current time.');\n\n        // unknown waiting corrections may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-unknown-waiting' });\n        return;\n      }\n    }\n\n    /**\n     * Handler for situations when the tech fires a `waiting` event\n     *\n     * @return {Boolean}\n     *         True if an action (or none) was needed to correct the waiting. False if no\n     *         checks passed\n     * @private\n     */\n  }, {\n    key: 'techWaiting_',\n    value: function techWaiting_() {\n      var seekable = this.seekable();\n      var currentTime = this.tech_.currentTime();\n\n      if (this.tech_.seeking() && this.fixesBadSeeks_()) {\n        // Tech is seeking or bad seek fixed, no action needed\n        return true;\n      }\n\n      if (this.tech_.seeking() || this.timer_ !== null) {\n        // Tech is seeking or already waiting on another action, no action needed\n        return true;\n      }\n\n      if (this.beforeSeekableWindow_(seekable, currentTime)) {\n        var livePoint = seekable.end(seekable.length - 1);\n\n        this.logger_('Fell out of live window at time ' + currentTime + '. Seeking to ' + ('live point (seekable end) ' + livePoint));\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(livePoint);\n\n        // live window resyncs may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-live-resync' });\n        return true;\n      }\n\n      var buffered = this.tech_.buffered();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      if (this.videoUnderflow_(nextRange, buffered, currentTime)) {\n        // Even though the video underflowed and was stuck in a gap, the audio overplayed\n        // the gap, leading currentTime into a buffered range. Seeking to currentTime\n        // allows the video to catch up to the audio position without losing any audio\n        // (only suffering ~3 seconds of frozen video and a pause in audio playback).\n        this.cancelTimer_();\n        this.tech_.setCurrentTime(currentTime);\n\n        // video underflow may be useful for monitoring QoS\n        this.tech_.trigger({ type: 'usage', name: 'hls-video-underflow' });\n        return true;\n      }\n\n      // check for gap\n      if (nextRange.length > 0) {\n        var difference = nextRange.start(0) - currentTime;\n\n        this.logger_('Stopped at ' + currentTime + ', setting timer for ' + difference + ', seeking ' + ('to ' + nextRange.start(0)));\n\n        this.timer_ = setTimeout(this.skipTheGap_.bind(this), difference * 1000, currentTime);\n        return true;\n      }\n\n      // All checks failed. Returning false to indicate failure to correct waiting\n      return false;\n    }\n  }, {\n    key: 'afterSeekableWindow_',\n    value: function afterSeekableWindow_(seekable, currentTime) {\n      if (!seekable.length) {\n        // we can't make a solid case if there's no seekable, default to false\n        return false;\n      }\n\n      if (currentTime > seekable.end(seekable.length - 1) + _ranges2['default'].SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'beforeSeekableWindow_',\n    value: function beforeSeekableWindow_(seekable, currentTime) {\n      if (seekable.length &&\n      // can't fall before 0 and 0 seekable start identifies VOD stream\n      seekable.start(0) > 0 && currentTime < seekable.start(0) - _ranges2['default'].SAFE_TIME_DELTA) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'videoUnderflow_',\n    value: function videoUnderflow_(nextRange, buffered, currentTime) {\n      if (nextRange.length === 0) {\n        // Even if there is no available next range, there is still a possibility we are\n        // stuck in a gap due to video underflow.\n        var gap = this.gapFromVideoUnderflow_(buffered, currentTime);\n\n        if (gap) {\n          this.logger_('Encountered a gap in video from ' + gap.start + ' to ' + gap.end + '. ' + ('Seeking to current time ' + currentTime));\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Timer callback. If playback still has not proceeded, then we seek\n     * to the start of the next buffered region.\n     *\n     * @private\n     */\n  }, {\n    key: 'skipTheGap_',\n    value: function skipTheGap_(scheduledCurrentTime) {\n      var buffered = this.tech_.buffered();\n      var currentTime = this.tech_.currentTime();\n      var nextRange = _ranges2['default'].findNextRange(buffered, currentTime);\n\n      this.cancelTimer_();\n\n      if (nextRange.length === 0 || currentTime !== scheduledCurrentTime) {\n        return;\n      }\n\n      this.logger_('skipTheGap_:', 'currentTime:', currentTime, 'scheduled currentTime:', scheduledCurrentTime, 'nextRange start:', nextRange.start(0));\n\n      // only seek if we still have not played\n      this.tech_.setCurrentTime(nextRange.start(0) + _ranges2['default'].TIME_FUDGE_FACTOR);\n\n      this.tech_.trigger({ type: 'usage', name: 'hls-gap-skip' });\n    }\n  }, {\n    key: 'gapFromVideoUnderflow_',\n    value: function gapFromVideoUnderflow_(buffered, currentTime) {\n      // At least in Chrome, if there is a gap in the video buffer, the audio will continue\n      // playing for ~3 seconds after the video gap starts. This is done to account for\n      // video buffer underflow/underrun (note that this is not done when there is audio\n      // buffer underflow/underrun -- in that case the video will stop as soon as it\n      // encounters the gap, as audio stalls are more noticeable/jarring to a user than\n      // video stalls). The player's time will reflect the playthrough of audio, so the\n      // time will appear as if we are in a buffered region, even if we are stuck in a\n      // \"gap.\"\n      //\n      // Example:\n      // video buffer:   0 => 10.1, 10.2 => 20\n      // audio buffer:   0 => 20\n      // overall buffer: 0 => 10.1, 10.2 => 20\n      // current time: 13\n      //\n      // Chrome's video froze at 10 seconds, where the video buffer encountered the gap,\n      // however, the audio continued playing until it reached ~3 seconds past the gap\n      // (13 seconds), at which point it stops as well. Since current time is past the\n      // gap, findNextRange will return no ranges.\n      //\n      // To check for this issue, we see if there is a gap that starts somewhere within\n      // a 3 second range (3 seconds +/- 1 second) back from our current time.\n      var gaps = _ranges2['default'].findGaps(buffered);\n\n      for (var i = 0; i < gaps.length; i++) {\n        var start = gaps.start(i);\n        var end = gaps.end(i);\n\n        // gap is starts no more than 4 seconds back\n        if (currentTime - start < 4 && currentTime - start > 2) {\n          return {\n            start: start,\n            end: end\n          };\n        }\n      }\n\n      return null;\n    }\n\n    /**\n     * A debugging logger noop that is set to console.log only if debugging\n     * is enabled globally\n     *\n     * @private\n     */\n  }, {\n    key: 'logger_',\n    value: function logger_() {}\n  }]);\n\n  return PlaybackWatcher;\n})();\n\nexports['default'] = PlaybackWatcher;\nmodule.exports = exports['default'];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}