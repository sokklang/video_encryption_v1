{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\nvar parsePid = function (packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\nvar parsePayloadUnitStartIndicator = function (packet) {\n  return !!(packet[1] & 0x40);\n};\nvar parseAdaptionField = function (packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if ((packet[3] & 0x30) >>> 4 > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\nvar parseType = function (packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\nvar parsePat = function (packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\nvar parsePmt = function (packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\nvar parsePesType = function (packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\nvar parsePesTime = function (packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n  var offset = 4 + parseAdaptionField(packet);\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 | (packet[offset + 10] & 0xFF) << 20 | (packet[offset + 11] & 0xFE) << 12 | (packet[offset + 12] & 0xFF) << 5 | (packet[offset + 13] & 0xFE) >>> 3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 | (packet[offset + 15] & 0xFF) << 20 | (packet[offset + 16] & 0xFE) << 12 | (packet[offset + 17] & 0xFF) << 5 | (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\nvar parseNalUnitType = function (type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\nvar videoPacketContainsKeyFrame = function (packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n      case 0:\n        // skip past non-sync sequences\n        if (frameBuffer[frameI - 1] !== 0) {\n          frameI += 2;\n          break;\n        } else if (frameBuffer[frameI - 2] !== 0) {\n          frameI++;\n          break;\n        }\n        if (frameSyncPoint + 3 !== frameI - 2) {\n          nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n          if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n            foundKeyFrame = true;\n          }\n        }\n\n        // drop trailing zeroes\n        do {\n          frameI++;\n        } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n        frameSyncPoint = frameI - 2;\n        frameI += 3;\n        break;\n      case 1:\n        // skip past non-sync sequences\n        if (frameBuffer[frameI - 1] !== 0 || frameBuffer[frameI - 2] !== 0) {\n          frameI += 3;\n          break;\n        }\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n        frameSyncPoint = frameI - 2;\n        frameI += 3;\n        break;\n      default:\n        // the current byte isn't a one or zero, so it cannot be part\n        // of a sync sequence\n        frameI += 3;\n        break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n  return foundKeyFrame;\n};\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};","map":{"version":3,"names":["StreamTypes","require","parsePid","packet","pid","parsePayloadUnitStartIndicator","parseAdaptionField","offset","parseType","pmtPid","parsePat","pusi","parsePmt","programMapTable","payloadOffset","sectionLength","tableEnd","programInfoLength","i","parsePesType","type","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","parsePesTime","byteLength","pes","ptsDtsFlags","pts","dts","parseNalUnitType","videoPacketContainsKeyFrame","frameBuffer","subarray","frameI","frameSyncPoint","foundKeyFrame","nalType","length","module","exports"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-hls/node_modules/mux.js/lib/m2ts/probe.js"],"sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) 2016 Brightcove\n * All rights reserved.\n *\n * Utilities to detect basic properties and metadata about TS Segments.\n */\n'use strict';\n\nvar StreamTypes = require('./stream-types.js');\n\nvar parsePid = function(packet) {\n  var pid = packet[1] & 0x1f;\n  pid <<= 8;\n  pid |= packet[2];\n  return pid;\n};\n\nvar parsePayloadUnitStartIndicator = function(packet) {\n  return !!(packet[1] & 0x40);\n};\n\nvar parseAdaptionField = function(packet) {\n  var offset = 0;\n  // if an adaption field is present, its length is specified by the\n  // fifth byte of the TS packet header. The adaptation field is\n  // used to add stuffing to PES packets that don't fill a complete\n  // TS packet, and to specify some forms of timing and control data\n  // that we do not currently use.\n  if (((packet[3] & 0x30) >>> 4) > 0x01) {\n    offset += packet[4] + 1;\n  }\n  return offset;\n};\n\nvar parseType = function(packet, pmtPid) {\n  var pid = parsePid(packet);\n  if (pid === 0) {\n    return 'pat';\n  } else if (pid === pmtPid) {\n    return 'pmt';\n  } else if (pmtPid) {\n    return 'pes';\n  }\n  return null;\n};\n\nvar parsePat = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    offset += packet[offset] + 1;\n  }\n\n  return (packet[offset + 10] & 0x1f) << 8 | packet[offset + 11];\n};\n\nvar parsePmt = function(packet) {\n  var programMapTable = {};\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  var payloadOffset = 4 + parseAdaptionField(packet);\n\n  if (pusi) {\n    payloadOffset += packet[payloadOffset] + 1;\n  }\n\n  // PMTs can be sent ahead of the time when they should actually\n  // take effect. We don't believe this should ever be the case\n  // for HLS but we'll ignore \"forward\" PMT declarations if we see\n  // them. Future PMT declarations have the current_next_indicator\n  // set to zero.\n  if (!(packet[payloadOffset + 5] & 0x01)) {\n    return;\n  }\n\n  var sectionLength, tableEnd, programInfoLength;\n  // the mapping table ends at the end of the current section\n  sectionLength = (packet[payloadOffset + 1] & 0x0f) << 8 | packet[payloadOffset + 2];\n  tableEnd = 3 + sectionLength - 4;\n\n  // to determine where the table is, we have to figure out how\n  // long the program info descriptors are\n  programInfoLength = (packet[payloadOffset + 10] & 0x0f) << 8 | packet[payloadOffset + 11];\n\n  // advance the offset to the first entry in the mapping table\n  var offset = 12 + programInfoLength;\n  while (offset < tableEnd) {\n    var i = payloadOffset + offset;\n    // add an entry that maps the elementary_pid to the stream_type\n    programMapTable[(packet[i + 1] & 0x1F) << 8 | packet[i + 2]] = packet[i];\n\n    // move to the next table entry\n    // skip past the elementary stream descriptors, if present\n    offset += ((packet[i + 3] & 0x0F) << 8 | packet[i + 4]) + 5;\n  }\n  return programMapTable;\n};\n\nvar parsePesType = function(packet, programMapTable) {\n  var pid = parsePid(packet);\n  var type = programMapTable[pid];\n  switch (type) {\n    case StreamTypes.H264_STREAM_TYPE:\n      return 'video';\n    case StreamTypes.ADTS_STREAM_TYPE:\n      return 'audio';\n    case StreamTypes.METADATA_STREAM_TYPE:\n      return 'timed-metadata';\n    default:\n      return null;\n  }\n};\n\nvar parsePesTime = function(packet) {\n  var pusi = parsePayloadUnitStartIndicator(packet);\n  if (!pusi) {\n    return null;\n  }\n\n  var offset = 4 + parseAdaptionField(packet);\n\n  if (offset >= packet.byteLength) {\n    // From the H 222.0 MPEG-TS spec\n    // \"For transport stream packets carrying PES packets, stuffing is needed when there\n    //  is insufficient PES packet data to completely fill the transport stream packet\n    //  payload bytes. Stuffing is accomplished by defining an adaptation field longer than\n    //  the sum of the lengths of the data elements in it, so that the payload bytes\n    //  remaining after the adaptation field exactly accommodates the available PES packet\n    //  data.\"\n    //\n    // If the offset is >= the length of the packet, then the packet contains no data\n    // and instead is just adaption field stuffing bytes\n    return null;\n  }\n\n  var pes = null;\n  var ptsDtsFlags;\n\n  // PES packets may be annotated with a PTS value, or a PTS value\n  // and a DTS value. Determine what combination of values is\n  // available to work with.\n  ptsDtsFlags = packet[offset + 7];\n\n  // PTS and DTS are normally stored as a 33-bit number.  Javascript\n  // performs all bitwise operations on 32-bit integers but javascript\n  // supports a much greater range (52-bits) of integer using standard\n  // mathematical operations.\n  // We construct a 31-bit value using bitwise operators over the 31\n  // most significant bits and then multiply by 4 (equal to a left-shift\n  // of 2) before we add the final 2 least significant bits of the\n  // timestamp (equal to an OR.)\n  if (ptsDtsFlags & 0xC0) {\n    pes = {};\n    // the PTS and DTS are not written out directly. For information\n    // on how they are encoded, see\n    // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n    pes.pts = (packet[offset + 9] & 0x0E) << 27 |\n      (packet[offset + 10] & 0xFF) << 20 |\n      (packet[offset + 11] & 0xFE) << 12 |\n      (packet[offset + 12] & 0xFF) <<  5 |\n      (packet[offset + 13] & 0xFE) >>>  3;\n    pes.pts *= 4; // Left shift by 2\n    pes.pts += (packet[offset + 13] & 0x06) >>> 1; // OR by the two LSBs\n    pes.dts = pes.pts;\n    if (ptsDtsFlags & 0x40) {\n      pes.dts = (packet[offset + 14] & 0x0E) << 27 |\n        (packet[offset + 15] & 0xFF) << 20 |\n        (packet[offset + 16] & 0xFE) << 12 |\n        (packet[offset + 17] & 0xFF) << 5 |\n        (packet[offset + 18] & 0xFE) >>> 3;\n      pes.dts *= 4; // Left shift by 2\n      pes.dts += (packet[offset + 18] & 0x06) >>> 1; // OR by the two LSBs\n    }\n  }\n  return pes;\n};\n\nvar parseNalUnitType = function(type) {\n  switch (type) {\n    case 0x05:\n      return 'slice_layer_without_partitioning_rbsp_idr';\n    case 0x06:\n      return 'sei_rbsp';\n    case 0x07:\n      return 'seq_parameter_set_rbsp';\n    case 0x08:\n      return 'pic_parameter_set_rbsp';\n    case 0x09:\n      return 'access_unit_delimiter_rbsp';\n    default:\n      return null;\n  }\n};\n\nvar videoPacketContainsKeyFrame = function(packet) {\n  var offset = 4 + parseAdaptionField(packet);\n  var frameBuffer = packet.subarray(offset);\n  var frameI = 0;\n  var frameSyncPoint = 0;\n  var foundKeyFrame = false;\n  var nalType;\n\n  // advance the sync point to a NAL start, if necessary\n  for (; frameSyncPoint < frameBuffer.byteLength - 3; frameSyncPoint++) {\n    if (frameBuffer[frameSyncPoint + 2] === 1) {\n      // the sync point is properly aligned\n      frameI = frameSyncPoint + 5;\n      break;\n    }\n  }\n\n  while (frameI < frameBuffer.byteLength) {\n    // look at the current byte to determine if we've hit the end of\n    // a NAL unit boundary\n    switch (frameBuffer[frameI]) {\n    case 0:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0) {\n        frameI += 2;\n        break;\n      } else if (frameBuffer[frameI - 2] !== 0) {\n        frameI++;\n        break;\n      }\n\n      if (frameSyncPoint + 3 !== frameI - 2) {\n        nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n        if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n          foundKeyFrame = true;\n        }\n      }\n\n      // drop trailing zeroes\n      do {\n        frameI++;\n      } while (frameBuffer[frameI] !== 1 && frameI < frameBuffer.length);\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    case 1:\n      // skip past non-sync sequences\n      if (frameBuffer[frameI - 1] !== 0 ||\n          frameBuffer[frameI - 2] !== 0) {\n        frameI += 3;\n        break;\n      }\n\n      nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n      if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n        foundKeyFrame = true;\n      }\n      frameSyncPoint = frameI - 2;\n      frameI += 3;\n      break;\n    default:\n      // the current byte isn't a one or zero, so it cannot be part\n      // of a sync sequence\n      frameI += 3;\n      break;\n    }\n  }\n  frameBuffer = frameBuffer.subarray(frameSyncPoint);\n  frameI -= frameSyncPoint;\n  frameSyncPoint = 0;\n  // parse the final nal\n  if (frameBuffer && frameBuffer.byteLength > 3) {\n    nalType = parseNalUnitType(frameBuffer[frameSyncPoint + 3] & 0x1f);\n    if (nalType === 'slice_layer_without_partitioning_rbsp_idr') {\n      foundKeyFrame = true;\n    }\n  }\n\n  return foundKeyFrame;\n};\n\n\nmodule.exports = {\n  parseType: parseType,\n  parsePat: parsePat,\n  parsePmt: parsePmt,\n  parsePayloadUnitStartIndicator: parsePayloadUnitStartIndicator,\n  parsePesType: parsePesType,\n  parsePesTime: parsePesTime,\n  videoPacketContainsKeyFrame: videoPacketContainsKeyFrame\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAE9C,IAAIC,QAAQ,GAAG,SAAAA,CAASC,MAAM,EAAE;EAC9B,IAAIC,GAAG,GAAGD,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;EAC1BC,GAAG,KAAK,CAAC;EACTA,GAAG,IAAID,MAAM,CAAC,CAAC,CAAC;EAChB,OAAOC,GAAG;AACZ,CAAC;AAED,IAAIC,8BAA8B,GAAG,SAAAA,CAASF,MAAM,EAAE;EACpD,OAAO,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AAC7B,CAAC;AAED,IAAIG,kBAAkB,GAAG,SAAAA,CAASH,MAAM,EAAE;EACxC,IAAII,MAAM,GAAG,CAAC;EACd;EACA;EACA;EACA;EACA;EACA,IAAK,CAACJ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,GAAI,IAAI,EAAE;IACrCI,MAAM,IAAIJ,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EACzB;EACA,OAAOI,MAAM;AACf,CAAC;AAED,IAAIC,SAAS,GAAG,SAAAA,CAASL,MAAM,EAAEM,MAAM,EAAE;EACvC,IAAIL,GAAG,GAAGF,QAAQ,CAACC,MAAM,CAAC;EAC1B,IAAIC,GAAG,KAAK,CAAC,EAAE;IACb,OAAO,KAAK;EACd,CAAC,MAAM,IAAIA,GAAG,KAAKK,MAAM,EAAE;IACzB,OAAO,KAAK;EACd,CAAC,MAAM,IAAIA,MAAM,EAAE;IACjB,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb,CAAC;AAED,IAAIC,QAAQ,GAAG,SAAAA,CAASP,MAAM,EAAE;EAC9B,IAAIQ,IAAI,GAAGN,8BAA8B,CAACF,MAAM,CAAC;EACjD,IAAII,MAAM,GAAG,CAAC,GAAGD,kBAAkB,CAACH,MAAM,CAAC;EAE3C,IAAIQ,IAAI,EAAE;IACRJ,MAAM,IAAIJ,MAAM,CAACI,MAAM,CAAC,GAAG,CAAC;EAC9B;EAEA,OAAO,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,GAAGJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC;AAChE,CAAC;AAED,IAAIK,QAAQ,GAAG,SAAAA,CAAST,MAAM,EAAE;EAC9B,IAAIU,eAAe,GAAG,CAAC,CAAC;EACxB,IAAIF,IAAI,GAAGN,8BAA8B,CAACF,MAAM,CAAC;EACjD,IAAIW,aAAa,GAAG,CAAC,GAAGR,kBAAkB,CAACH,MAAM,CAAC;EAElD,IAAIQ,IAAI,EAAE;IACRG,aAAa,IAAIX,MAAM,CAACW,aAAa,CAAC,GAAG,CAAC;EAC5C;;EAEA;EACA;EACA;EACA;EACA;EACA,IAAI,EAAEX,MAAM,CAACW,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE;IACvC;EACF;EAEA,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,iBAAiB;EAC9C;EACAF,aAAa,GAAG,CAACZ,MAAM,CAACW,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAGX,MAAM,CAACW,aAAa,GAAG,CAAC,CAAC;EACnFE,QAAQ,GAAG,CAAC,GAAGD,aAAa,GAAG,CAAC;;EAEhC;EACA;EACAE,iBAAiB,GAAG,CAACd,MAAM,CAACW,aAAa,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,GAAGX,MAAM,CAACW,aAAa,GAAG,EAAE,CAAC;;EAEzF;EACA,IAAIP,MAAM,GAAG,EAAE,GAAGU,iBAAiB;EACnC,OAAOV,MAAM,GAAGS,QAAQ,EAAE;IACxB,IAAIE,CAAC,GAAGJ,aAAa,GAAGP,MAAM;IAC9B;IACAM,eAAe,CAAC,CAACV,MAAM,CAACe,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAGf,MAAM,CAACe,CAAC,GAAG,CAAC,CAAC,CAAC,GAAGf,MAAM,CAACe,CAAC,CAAC;;IAExE;IACA;IACAX,MAAM,IAAI,CAAC,CAACJ,MAAM,CAACe,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,GAAGf,MAAM,CAACe,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;EAC7D;EACA,OAAOL,eAAe;AACxB,CAAC;AAED,IAAIM,YAAY,GAAG,SAAAA,CAAShB,MAAM,EAAEU,eAAe,EAAE;EACnD,IAAIT,GAAG,GAAGF,QAAQ,CAACC,MAAM,CAAC;EAC1B,IAAIiB,IAAI,GAAGP,eAAe,CAACT,GAAG,CAAC;EAC/B,QAAQgB,IAAI;IACV,KAAKpB,WAAW,CAACqB,gBAAgB;MAC/B,OAAO,OAAO;IAChB,KAAKrB,WAAW,CAACsB,gBAAgB;MAC/B,OAAO,OAAO;IAChB,KAAKtB,WAAW,CAACuB,oBAAoB;MACnC,OAAO,gBAAgB;IACzB;MACE,OAAO,IAAI;EACf;AACF,CAAC;AAED,IAAIC,YAAY,GAAG,SAAAA,CAASrB,MAAM,EAAE;EAClC,IAAIQ,IAAI,GAAGN,8BAA8B,CAACF,MAAM,CAAC;EACjD,IAAI,CAACQ,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EAEA,IAAIJ,MAAM,GAAG,CAAC,GAAGD,kBAAkB,CAACH,MAAM,CAAC;EAE3C,IAAII,MAAM,IAAIJ,MAAM,CAACsB,UAAU,EAAE;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAO,IAAI;EACb;EAEA,IAAIC,GAAG,GAAG,IAAI;EACd,IAAIC,WAAW;;EAEf;EACA;EACA;EACAA,WAAW,GAAGxB,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC;;EAEhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIoB,WAAW,GAAG,IAAI,EAAE;IACtBD,GAAG,GAAG,CAAC,CAAC;IACR;IACA;IACA;IACAA,GAAG,CAACE,GAAG,GAAG,CAACzB,MAAM,CAACI,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,GACzC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,GAClC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,GAClC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAM,CAAC,GAClC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,MAAO,CAAC;IACrCmB,GAAG,CAACE,GAAG,IAAI,CAAC,CAAC,CAAC;IACdF,GAAG,CAACE,GAAG,IAAI,CAACzB,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;IAC/CmB,GAAG,CAACG,GAAG,GAAGH,GAAG,CAACE,GAAG;IACjB,IAAID,WAAW,GAAG,IAAI,EAAE;MACtBD,GAAG,CAACG,GAAG,GAAG,CAAC1B,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,GAC1C,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,GAClC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,EAAE,GAClC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,GACjC,CAACJ,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC;MACpCmB,GAAG,CAACG,GAAG,IAAI,CAAC,CAAC,CAAC;MACdH,GAAG,CAACG,GAAG,IAAI,CAAC1B,MAAM,CAACI,MAAM,GAAG,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;IACjD;EACF;EACA,OAAOmB,GAAG;AACZ,CAAC;AAED,IAAII,gBAAgB,GAAG,SAAAA,CAASV,IAAI,EAAE;EACpC,QAAQA,IAAI;IACV,KAAK,IAAI;MACP,OAAO,2CAA2C;IACpD,KAAK,IAAI;MACP,OAAO,UAAU;IACnB,KAAK,IAAI;MACP,OAAO,wBAAwB;IACjC,KAAK,IAAI;MACP,OAAO,wBAAwB;IACjC,KAAK,IAAI;MACP,OAAO,4BAA4B;IACrC;MACE,OAAO,IAAI;EACf;AACF,CAAC;AAED,IAAIW,2BAA2B,GAAG,SAAAA,CAAS5B,MAAM,EAAE;EACjD,IAAII,MAAM,GAAG,CAAC,GAAGD,kBAAkB,CAACH,MAAM,CAAC;EAC3C,IAAI6B,WAAW,GAAG7B,MAAM,CAAC8B,QAAQ,CAAC1B,MAAM,CAAC;EACzC,IAAI2B,MAAM,GAAG,CAAC;EACd,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,aAAa,GAAG,KAAK;EACzB,IAAIC,OAAO;;EAEX;EACA,OAAOF,cAAc,GAAGH,WAAW,CAACP,UAAU,GAAG,CAAC,EAAEU,cAAc,EAAE,EAAE;IACpE,IAAIH,WAAW,CAACG,cAAc,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;MACzC;MACAD,MAAM,GAAGC,cAAc,GAAG,CAAC;MAC3B;IACF;EACF;EAEA,OAAOD,MAAM,GAAGF,WAAW,CAACP,UAAU,EAAE;IACtC;IACA;IACA,QAAQO,WAAW,CAACE,MAAM,CAAC;MAC3B,KAAK,CAAC;QACJ;QACA,IAAIF,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;UACjCA,MAAM,IAAI,CAAC;UACX;QACF,CAAC,MAAM,IAAIF,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;UACxCA,MAAM,EAAE;UACR;QACF;QAEA,IAAIC,cAAc,GAAG,CAAC,KAAKD,MAAM,GAAG,CAAC,EAAE;UACrCG,OAAO,GAAGP,gBAAgB,CAACE,WAAW,CAACG,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;UAClE,IAAIE,OAAO,KAAK,2CAA2C,EAAE;YAC3DD,aAAa,GAAG,IAAI;UACtB;QACF;;QAEA;QACA,GAAG;UACDF,MAAM,EAAE;QACV,CAAC,QAAQF,WAAW,CAACE,MAAM,CAAC,KAAK,CAAC,IAAIA,MAAM,GAAGF,WAAW,CAACM,MAAM;QACjEH,cAAc,GAAGD,MAAM,GAAG,CAAC;QAC3BA,MAAM,IAAI,CAAC;QACX;MACF,KAAK,CAAC;QACJ;QACA,IAAIF,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,IAC7BF,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;UACjCA,MAAM,IAAI,CAAC;UACX;QACF;QAEAG,OAAO,GAAGP,gBAAgB,CAACE,WAAW,CAACG,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;QAClE,IAAIE,OAAO,KAAK,2CAA2C,EAAE;UAC3DD,aAAa,GAAG,IAAI;QACtB;QACAD,cAAc,GAAGD,MAAM,GAAG,CAAC;QAC3BA,MAAM,IAAI,CAAC;QACX;MACF;QACE;QACA;QACAA,MAAM,IAAI,CAAC;QACX;IACF;EACF;EACAF,WAAW,GAAGA,WAAW,CAACC,QAAQ,CAACE,cAAc,CAAC;EAClDD,MAAM,IAAIC,cAAc;EACxBA,cAAc,GAAG,CAAC;EAClB;EACA,IAAIH,WAAW,IAAIA,WAAW,CAACP,UAAU,GAAG,CAAC,EAAE;IAC7CY,OAAO,GAAGP,gBAAgB,CAACE,WAAW,CAACG,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IAClE,IAAIE,OAAO,KAAK,2CAA2C,EAAE;MAC3DD,aAAa,GAAG,IAAI;IACtB;EACF;EAEA,OAAOA,aAAa;AACtB,CAAC;AAGDG,MAAM,CAACC,OAAO,GAAG;EACfhC,SAAS,EAAEA,SAAS;EACpBE,QAAQ,EAAEA,QAAQ;EAClBE,QAAQ,EAAEA,QAAQ;EAClBP,8BAA8B,EAAEA,8BAA8B;EAC9Dc,YAAY,EAAEA,YAAY;EAC1BK,YAAY,EAAEA,YAAY;EAC1BO,2BAA2B,EAAEA;AAC/B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}