{"ast":null,"code":"/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\n\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar MP2T_PACKET_LENGTH = 188,\n  // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function () {\n  var buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n  TransportPacketStream.prototype.init.call(this);\n\n  // Deliver new bytes to the stream.\n\n  this.push = function (bytes) {\n    var startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n  this.flush = function () {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function () {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n  parsePsi = function (payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n  parsePat = function (payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function (payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE && self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE && self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function (packet) {\n    var result = {},\n      offset = 4;\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if ((packet[3] & 0x30) >>> 4 > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n  this.processPes_ = function (packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n    this.trigger('data', result);\n  };\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function () {\n  var self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function (payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + (payload[4] << 8 | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 | (payload[10] & 0xFF) << 20 | (payload[11] & 0xFE) << 12 | (payload[12] & 0xFF) << 5 | (payload[13] & 0xFE) >>> 3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 | (payload[15] & 0xFF) << 20 | (payload[16] & 0xFE) << 12 | (payload[17] & 0xFF) << 5 | (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function (stream, type, forceFlush) {\n      var packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n  ElementaryStream.prototype.init.call(this);\n  this.push = function (data) {\n    ({\n      pat: function () {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function () {\n        var stream, streamType;\n        switch (data.streamType) {\n          case StreamTypes.H264_STREAM_TYPE:\n          case m2tsStreamTypes.H264_STREAM_TYPE:\n            stream = video;\n            streamType = 'video';\n            break;\n          case StreamTypes.ADTS_STREAM_TYPE:\n            stream = audio;\n            streamType = 'audio';\n            break;\n          case StreamTypes.METADATA_STREAM_TYPE:\n            stream = timedMetadata;\n            streamType = 'timed-metadata';\n            break;\n          default:\n            // ignore unknown stream types\n            return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function () {\n        var event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function () {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\nmodule.exports = m2ts;","map":{"version":3,"names":["Stream","require","CaptionStream","StreamTypes","TimestampRolloverStream","m2tsStreamTypes","TransportPacketStream","TransportParseStream","ElementaryStream","MP2T_PACKET_LENGTH","SYNC_BYTE","buffer","Uint8Array","bytesInBuffer","prototype","init","call","push","bytes","startIndex","endIndex","everything","byteLength","set","subarray","trigger","flush","parsePsi","parsePat","parsePmt","self","packetsWaitingForPmt","programMapTable","undefined","payload","psi","offset","payloadUnitStartIndicator","type","pat","section_number","last_section_number","pmtPid","pmt","sectionLength","tableEnd","programInfoLength","video","audio","streamType","pid","H264_STREAM_TYPE","ADTS_STREAM_TYPE","METADATA_STREAM_TYPE","packet","result","length","processPes_","apply","shift","data","STREAM_TYPES","h264","adts","size","timedMetadata","parsePes","pes","ptsDtsFlags","packetLength","dataAlignmentIndicator","pts","dts","flushStream","stream","forceFlush","packetData","event","i","packetFlushable","fragment","trackId","tracks","timelineStartInfo","baseMediaDecodeTime","id","codec","m2ts","PAT_PID","Cea608Stream","MetadataStream","hasOwnProperty","module","exports"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-media-sources/node_modules/mux.js/lib/m2ts/m2ts.js"],"sourcesContent":["/**\n * mux.js\n *\n * Copyright (c) 2015 Brightcove\n * All rights reserved.\n *\n * A stream-based mp2t to mp4 converter. This utility can be used to\n * deliver mp4s to a SourceBuffer on platforms that support native\n * Media Source Extensions.\n */\n'use strict';\nvar Stream = require('../utils/stream.js'),\n  CaptionStream = require('./caption-stream'),\n  StreamTypes = require('./stream-types'),\n  TimestampRolloverStream = require('./timestamp-rollover-stream').TimestampRolloverStream;\n\nvar m2tsStreamTypes = require('./stream-types.js');\n\n// object types\nvar TransportPacketStream, TransportParseStream, ElementaryStream;\n\n// constants\nvar\n  MP2T_PACKET_LENGTH = 188, // bytes\n  SYNC_BYTE = 0x47;\n\n/**\n * Splits an incoming stream of binary data into MPEG-2 Transport\n * Stream packets.\n */\nTransportPacketStream = function() {\n  var\n    buffer = new Uint8Array(MP2T_PACKET_LENGTH),\n    bytesInBuffer = 0;\n\n  TransportPacketStream.prototype.init.call(this);\n\n   // Deliver new bytes to the stream.\n\n  this.push = function(bytes) {\n    var\n      startIndex = 0,\n      endIndex = MP2T_PACKET_LENGTH,\n      everything;\n\n    // If there are bytes remaining from the last segment, prepend them to the\n    // bytes that were pushed in\n    if (bytesInBuffer) {\n      everything = new Uint8Array(bytes.byteLength + bytesInBuffer);\n      everything.set(buffer.subarray(0, bytesInBuffer));\n      everything.set(bytes, bytesInBuffer);\n      bytesInBuffer = 0;\n    } else {\n      everything = bytes;\n    }\n\n    // While we have enough data for a packet\n    while (endIndex < everything.byteLength) {\n      // Look for a pair of start and end sync bytes in the data..\n      if (everything[startIndex] === SYNC_BYTE && everything[endIndex] === SYNC_BYTE) {\n        // We found a packet so emit it and jump one whole packet forward in\n        // the stream\n        this.trigger('data', everything.subarray(startIndex, endIndex));\n        startIndex += MP2T_PACKET_LENGTH;\n        endIndex += MP2T_PACKET_LENGTH;\n        continue;\n      }\n      // If we get here, we have somehow become de-synchronized and we need to step\n      // forward one byte at a time until we find a pair of sync bytes that denote\n      // a packet\n      startIndex++;\n      endIndex++;\n    }\n\n    // If there was some data left over at the end of the segment that couldn't\n    // possibly be a whole packet, keep it because it might be the start of a packet\n    // that continues in the next segment\n    if (startIndex < everything.byteLength) {\n      buffer.set(everything.subarray(startIndex), 0);\n      bytesInBuffer = everything.byteLength - startIndex;\n    }\n  };\n\n  this.flush = function() {\n    // If the buffer contains a whole packet when we are being flushed, emit it\n    // and empty the buffer. Otherwise hold onto the data because it may be\n    // important for decoding the next segment\n    if (bytesInBuffer === MP2T_PACKET_LENGTH && buffer[0] === SYNC_BYTE) {\n      this.trigger('data', buffer);\n      bytesInBuffer = 0;\n    }\n    this.trigger('done');\n  };\n};\nTransportPacketStream.prototype = new Stream();\n\n/**\n * Accepts an MP2T TransportPacketStream and emits data events with parsed\n * forms of the individual transport stream packets.\n */\nTransportParseStream = function() {\n  var parsePsi, parsePat, parsePmt, self;\n  TransportParseStream.prototype.init.call(this);\n  self = this;\n\n  this.packetsWaitingForPmt = [];\n  this.programMapTable = undefined;\n\n  parsePsi = function(payload, psi) {\n    var offset = 0;\n\n    // PSI packets may be split into multiple sections and those\n    // sections may be split into multiple packets. If a PSI\n    // section starts in this packet, the payload_unit_start_indicator\n    // will be true and the first byte of the payload will indicate\n    // the offset from the current position to the start of the\n    // section.\n    if (psi.payloadUnitStartIndicator) {\n      offset += payload[offset] + 1;\n    }\n\n    if (psi.type === 'pat') {\n      parsePat(payload.subarray(offset), psi);\n    } else {\n      parsePmt(payload.subarray(offset), psi);\n    }\n  };\n\n  parsePat = function(payload, pat) {\n    pat.section_number = payload[7]; // eslint-disable-line camelcase\n    pat.last_section_number = payload[8]; // eslint-disable-line camelcase\n\n    // skip the PSI header and parse the first PMT entry\n    self.pmtPid = (payload[10] & 0x1F) << 8 | payload[11];\n    pat.pmtPid = self.pmtPid;\n  };\n\n  /**\n   * Parse out the relevant fields of a Program Map Table (PMT).\n   * @param payload {Uint8Array} the PMT-specific portion of an MP2T\n   * packet. The first byte in this array should be the table_id\n   * field.\n   * @param pmt {object} the object that should be decorated with\n   * fields parsed from the PMT.\n   */\n  parsePmt = function(payload, pmt) {\n    var sectionLength, tableEnd, programInfoLength, offset;\n\n    // PMTs can be sent ahead of the time when they should actually\n    // take effect. We don't believe this should ever be the case\n    // for HLS but we'll ignore \"forward\" PMT declarations if we see\n    // them. Future PMT declarations have the current_next_indicator\n    // set to zero.\n    if (!(payload[5] & 0x01)) {\n      return;\n    }\n\n    // overwrite any existing program map table\n    self.programMapTable = {\n      video: null,\n      audio: null,\n      'timed-metadata': {}\n    };\n\n    // the mapping table ends at the end of the current section\n    sectionLength = (payload[1] & 0x0f) << 8 | payload[2];\n    tableEnd = 3 + sectionLength - 4;\n\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (payload[10] & 0x0f) << 8 | payload[11];\n\n    // advance the offset to the first entry in the mapping table\n    offset = 12 + programInfoLength;\n    while (offset < tableEnd) {\n      var streamType = payload[offset];\n      var pid = (payload[offset + 1] & 0x1F) << 8 | payload[offset + 2];\n\n      // only map a single elementary_pid for audio and video stream types\n      // TODO: should this be done for metadata too? for now maintain behavior of\n      //       multiple metadata streams\n      if (streamType === StreamTypes.H264_STREAM_TYPE &&\n          self.programMapTable.video === null) {\n        self.programMapTable.video = pid;\n      } else if (streamType === StreamTypes.ADTS_STREAM_TYPE &&\n                 self.programMapTable.audio === null) {\n        self.programMapTable.audio = pid;\n      } else if (streamType === StreamTypes.METADATA_STREAM_TYPE) {\n        // map pid to stream type for metadata streams\n        self.programMapTable['timed-metadata'][pid] = streamType;\n      }\n\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((payload[offset + 3] & 0x0F) << 8 | payload[offset + 4]) + 5;\n    }\n\n    // record the map on the packet as well\n    pmt.programMapTable = self.programMapTable;\n  };\n\n  /**\n   * Deliver a new MP2T packet to the stream.\n   */\n  this.push = function(packet) {\n    var\n      result = {},\n      offset = 4;\n\n    result.payloadUnitStartIndicator = !!(packet[1] & 0x40);\n\n    // pid is a 13-bit field starting at the last bit of packet[1]\n    result.pid = packet[1] & 0x1f;\n    result.pid <<= 8;\n    result.pid |= packet[2];\n\n    // if an adaption field is present, its length is specified by the\n    // fifth byte of the TS packet header. The adaptation field is\n    // used to add stuffing to PES packets that don't fill a complete\n    // TS packet, and to specify some forms of timing and control data\n    // that we do not currently use.\n    if (((packet[3] & 0x30) >>> 4) > 0x01) {\n      offset += packet[offset] + 1;\n    }\n\n    // parse the rest of the packet based on the type\n    if (result.pid === 0) {\n      result.type = 'pat';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n    } else if (result.pid === this.pmtPid) {\n      result.type = 'pmt';\n      parsePsi(packet.subarray(offset), result);\n      this.trigger('data', result);\n\n      // if there are any packets waiting for a PMT to be found, process them now\n      while (this.packetsWaitingForPmt.length) {\n        this.processPes_.apply(this, this.packetsWaitingForPmt.shift());\n      }\n    } else if (this.programMapTable === undefined) {\n      // When we have not seen a PMT yet, defer further processing of\n      // PES packets until one has been parsed\n      this.packetsWaitingForPmt.push([packet, offset, result]);\n    } else {\n      this.processPes_(packet, offset, result);\n    }\n  };\n\n  this.processPes_ = function(packet, offset, result) {\n    // set the appropriate stream type\n    if (result.pid === this.programMapTable.video) {\n      result.streamType = StreamTypes.H264_STREAM_TYPE;\n    } else if (result.pid === this.programMapTable.audio) {\n      result.streamType = StreamTypes.ADTS_STREAM_TYPE;\n    } else {\n      // if not video or audio, it is timed-metadata or unknown\n      // if unknown, streamType will be undefined\n      result.streamType = this.programMapTable['timed-metadata'][result.pid];\n    }\n\n    result.type = 'pes';\n    result.data = packet.subarray(offset);\n\n    this.trigger('data', result);\n  };\n\n};\nTransportParseStream.prototype = new Stream();\nTransportParseStream.STREAM_TYPES  = {\n  h264: 0x1b,\n  adts: 0x0f\n};\n\n/**\n * Reconsistutes program elementary stream (PES) packets from parsed\n * transport stream packets. That is, if you pipe an\n * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output\n * events will be events which capture the bytes for individual PES\n * packets plus relevant metadata that has been extracted from the\n * container.\n */\nElementaryStream = function() {\n  var\n    self = this,\n    // PES packet fragments\n    video = {\n      data: [],\n      size: 0\n    },\n    audio = {\n      data: [],\n      size: 0\n    },\n    timedMetadata = {\n      data: [],\n      size: 0\n    },\n    parsePes = function(payload, pes) {\n      var ptsDtsFlags;\n\n      // get the packet length, this will be 0 for video\n      pes.packetLength = 6 + ((payload[4] << 8) | payload[5]);\n\n      // find out if this packets starts a new keyframe\n      pes.dataAlignmentIndicator = (payload[6] & 0x04) !== 0;\n      // PES packets may be annotated with a PTS value, or a PTS value\n      // and a DTS value. Determine what combination of values is\n      // available to work with.\n      ptsDtsFlags = payload[7];\n\n      // PTS and DTS are normally stored as a 33-bit number.  Javascript\n      // performs all bitwise operations on 32-bit integers but javascript\n      // supports a much greater range (52-bits) of integer using standard\n      // mathematical operations.\n      // We construct a 31-bit value using bitwise operators over the 31\n      // most significant bits and then multiply by 4 (equal to a left-shift\n      // of 2) before we add the final 2 least significant bits of the\n      // timestamp (equal to an OR.)\n      if (ptsDtsFlags & 0xC0) {\n        // the PTS and DTS are not written out directly. For information\n        // on how they are encoded, see\n        // http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n        pes.pts = (payload[9] & 0x0E) << 27 |\n          (payload[10] & 0xFF) << 20 |\n          (payload[11] & 0xFE) << 12 |\n          (payload[12] & 0xFF) <<  5 |\n          (payload[13] & 0xFE) >>>  3;\n        pes.pts *= 4; // Left shift by 2\n        pes.pts += (payload[13] & 0x06) >>> 1; // OR by the two LSBs\n        pes.dts = pes.pts;\n        if (ptsDtsFlags & 0x40) {\n          pes.dts = (payload[14] & 0x0E) << 27 |\n            (payload[15] & 0xFF) << 20 |\n            (payload[16] & 0xFE) << 12 |\n            (payload[17] & 0xFF) << 5 |\n            (payload[18] & 0xFE) >>> 3;\n          pes.dts *= 4; // Left shift by 2\n          pes.dts += (payload[18] & 0x06) >>> 1; // OR by the two LSBs\n        }\n      }\n      // the data section starts immediately after the PES header.\n      // pes_header_data_length specifies the number of header bytes\n      // that follow the last byte of the field.\n      pes.data = payload.subarray(9 + payload[8]);\n    },\n    flushStream = function(stream, type, forceFlush) {\n      var\n        packetData = new Uint8Array(stream.size),\n        event = {\n          type: type\n        },\n        i = 0,\n        offset = 0,\n        packetFlushable = false,\n        fragment;\n\n      // do nothing if there is not enough buffered data for a complete\n      // PES header\n      if (!stream.data.length || stream.size < 9) {\n        return;\n      }\n      event.trackId = stream.data[0].pid;\n\n      // reassemble the packet\n      for (i = 0; i < stream.data.length; i++) {\n        fragment = stream.data[i];\n\n        packetData.set(fragment.data, offset);\n        offset += fragment.data.byteLength;\n      }\n\n      // parse assembled packet's PES header\n      parsePes(packetData, event);\n\n      // non-video PES packets MUST have a non-zero PES_packet_length\n      // check that there is enough stream data to fill the packet\n      packetFlushable = type === 'video' || event.packetLength <= stream.size;\n\n      // flush pending packets if the conditions are right\n      if (forceFlush || packetFlushable) {\n        stream.size = 0;\n        stream.data.length = 0;\n      }\n\n      // only emit packets that are complete. this is to avoid assembling\n      // incomplete PES packets due to poor segmentation\n      if (packetFlushable) {\n        self.trigger('data', event);\n      }\n    };\n\n  ElementaryStream.prototype.init.call(this);\n\n  this.push = function(data) {\n    ({\n      pat: function() {\n        // we have to wait for the PMT to arrive as well before we\n        // have any meaningful metadata\n      },\n      pes: function() {\n        var stream, streamType;\n\n        switch (data.streamType) {\n        case StreamTypes.H264_STREAM_TYPE:\n        case m2tsStreamTypes.H264_STREAM_TYPE:\n          stream = video;\n          streamType = 'video';\n          break;\n        case StreamTypes.ADTS_STREAM_TYPE:\n          stream = audio;\n          streamType = 'audio';\n          break;\n        case StreamTypes.METADATA_STREAM_TYPE:\n          stream = timedMetadata;\n          streamType = 'timed-metadata';\n          break;\n        default:\n          // ignore unknown stream types\n          return;\n        }\n\n        // if a new packet is starting, we can flush the completed\n        // packet\n        if (data.payloadUnitStartIndicator) {\n          flushStream(stream, streamType, true);\n        }\n\n        // buffer this fragment until we are sure we've received the\n        // complete payload\n        stream.data.push(data);\n        stream.size += data.data.byteLength;\n      },\n      pmt: function() {\n        var\n          event = {\n            type: 'metadata',\n            tracks: []\n          },\n          programMapTable = data.programMapTable;\n\n        // translate audio and video streams to tracks\n        if (programMapTable.video !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.video,\n            codec: 'avc',\n            type: 'video'\n          });\n        }\n        if (programMapTable.audio !== null) {\n          event.tracks.push({\n            timelineStartInfo: {\n              baseMediaDecodeTime: 0\n            },\n            id: +programMapTable.audio,\n            codec: 'adts',\n            type: 'audio'\n          });\n        }\n\n        self.trigger('data', event);\n      }\n    })[data.type]();\n  };\n\n  /**\n   * Flush any remaining input. Video PES packets may be of variable\n   * length. Normally, the start of a new video packet can trigger the\n   * finalization of the previous packet. That is not possible if no\n   * more video is forthcoming, however. In that case, some other\n   * mechanism (like the end of the file) has to be employed. When it is\n   * clear that no additional data is forthcoming, calling this method\n   * will flush the buffered packets.\n   */\n  this.flush = function() {\n    // !!THIS ORDER IS IMPORTANT!!\n    // video first then audio\n    flushStream(video, 'video');\n    flushStream(audio, 'audio');\n    flushStream(timedMetadata, 'timed-metadata');\n    this.trigger('done');\n  };\n};\nElementaryStream.prototype = new Stream();\n\nvar m2ts = {\n  PAT_PID: 0x0000,\n  MP2T_PACKET_LENGTH: MP2T_PACKET_LENGTH,\n  TransportPacketStream: TransportPacketStream,\n  TransportParseStream: TransportParseStream,\n  ElementaryStream: ElementaryStream,\n  TimestampRolloverStream: TimestampRolloverStream,\n  CaptionStream: CaptionStream.CaptionStream,\n  Cea608Stream: CaptionStream.Cea608Stream,\n  MetadataStream: require('./metadata-stream')\n};\n\nfor (var type in StreamTypes) {\n  if (StreamTypes.hasOwnProperty(type)) {\n    m2ts[type] = StreamTypes[type];\n  }\n}\n\nmodule.exports = m2ts;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}