{"ast":null,"code":"'use strict';\n\nvar Stream = require('../utils/stream.js');\nvar AdtsStream;\nvar ADTS_SAMPLING_FREQUENCIES = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function () {\n  var buffer;\n  AdtsStream.prototype.init.call(this);\n  this.push = function (packet) {\n    var i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = (buffer[i + 3] & 0x03) << 11 | buffer[i + 4] << 3 | (buffer[i + 5] & 0xe0) >> 5;\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = sampleCount * 90000 / ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + frameNum * adtsFrameDuration,\n        dts: packet.dts + frameNum * adtsFrameDuration,\n        sampleCount: sampleCount,\n        audioobjecttype: (buffer[i + 2] >>> 6 & 0x03) + 1,\n        channelcount: (buffer[i + 2] & 1) << 2 | (buffer[i + 3] & 0xc0) >>> 6,\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function () {\n    this.trigger('done');\n  };\n};\nAdtsStream.prototype = new Stream();\nmodule.exports = AdtsStream;","map":{"version":3,"names":["Stream","require","AdtsStream","ADTS_SAMPLING_FREQUENCIES","buffer","prototype","init","call","push","packet","i","frameNum","frameLength","protectionSkipBytes","frameEnd","oldBuffer","sampleCount","adtsFrameDuration","type","Uint8Array","byteLength","data","set","length","trigger","pts","dts","audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize","subarray","undefined","flush","module","exports"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-media-sources/node_modules/mux.js/lib/codecs/adts.js"],"sourcesContent":["'use strict';\n\nvar Stream = require('../utils/stream.js');\n\nvar AdtsStream;\n\nvar\n  ADTS_SAMPLING_FREQUENCIES = [\n    96000,\n    88200,\n    64000,\n    48000,\n    44100,\n    32000,\n    24000,\n    22050,\n    16000,\n    12000,\n    11025,\n    8000,\n    7350\n  ];\n\n/*\n * Accepts a ElementaryStream and emits data events with parsed\n * AAC Audio Frames of the individual packets. Input audio in ADTS\n * format is unpacked and re-emitted as AAC frames.\n *\n * @see http://wiki.multimedia.cx/index.php?title=ADTS\n * @see http://wiki.multimedia.cx/?title=Understanding_AAC\n */\nAdtsStream = function() {\n  var buffer;\n\n  AdtsStream.prototype.init.call(this);\n\n  this.push = function(packet) {\n    var\n      i = 0,\n      frameNum = 0,\n      frameLength,\n      protectionSkipBytes,\n      frameEnd,\n      oldBuffer,\n      sampleCount,\n      adtsFrameDuration;\n\n    if (packet.type !== 'audio') {\n      // ignore non-audio data\n      return;\n    }\n\n    // Prepend any data in the buffer to the input data so that we can parse\n    // aac frames the cross a PES packet boundary\n    if (buffer) {\n      oldBuffer = buffer;\n      buffer = new Uint8Array(oldBuffer.byteLength + packet.data.byteLength);\n      buffer.set(oldBuffer);\n      buffer.set(packet.data, oldBuffer.byteLength);\n    } else {\n      buffer = packet.data;\n    }\n\n    // unpack any ADTS frames which have been fully received\n    // for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS\n    while (i + 5 < buffer.length) {\n\n      // Loook for the start of an ADTS header..\n      if (buffer[i] !== 0xFF || (buffer[i + 1] & 0xF6) !== 0xF0) {\n        // If a valid header was not found,  jump one forward and attempt to\n        // find a valid ADTS header starting at the next byte\n        i++;\n        continue;\n      }\n\n      // The protection skip bit tells us if we have 2 bytes of CRC data at the\n      // end of the ADTS header\n      protectionSkipBytes = (~buffer[i + 1] & 0x01) * 2;\n\n      // Frame length is a 13 bit integer starting 16 bits from the\n      // end of the sync sequence\n      frameLength = ((buffer[i + 3] & 0x03) << 11) |\n        (buffer[i + 4] << 3) |\n        ((buffer[i + 5] & 0xe0) >> 5);\n\n      sampleCount = ((buffer[i + 6] & 0x03) + 1) * 1024;\n      adtsFrameDuration = (sampleCount * 90000) /\n        ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2];\n\n      frameEnd = i + frameLength;\n\n      // If we don't have enough data to actually finish this ADTS frame, return\n      // and wait for more data\n      if (buffer.byteLength < frameEnd) {\n        return;\n      }\n\n      // Otherwise, deliver the complete AAC frame\n      this.trigger('data', {\n        pts: packet.pts + (frameNum * adtsFrameDuration),\n        dts: packet.dts + (frameNum * adtsFrameDuration),\n        sampleCount: sampleCount,\n        audioobjecttype: ((buffer[i + 2] >>> 6) & 0x03) + 1,\n        channelcount: ((buffer[i + 2] & 1) << 2) |\n          ((buffer[i + 3] & 0xc0) >>> 6),\n        samplerate: ADTS_SAMPLING_FREQUENCIES[(buffer[i + 2] & 0x3c) >>> 2],\n        samplingfrequencyindex: (buffer[i + 2] & 0x3c) >>> 2,\n        // assume ISO/IEC 14496-12 AudioSampleEntry default of 16\n        samplesize: 16,\n        data: buffer.subarray(i + 7 + protectionSkipBytes, frameEnd)\n      });\n\n      // If the buffer is empty, clear it and return\n      if (buffer.byteLength === frameEnd) {\n        buffer = undefined;\n        return;\n      }\n\n      frameNum++;\n\n      // Remove the finished frame from the buffer and start the process again\n      buffer = buffer.subarray(frameEnd);\n    }\n  };\n  this.flush = function() {\n    this.trigger('done');\n  };\n};\n\nAdtsStream.prototype = new Stream();\n\nmodule.exports = AdtsStream;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}