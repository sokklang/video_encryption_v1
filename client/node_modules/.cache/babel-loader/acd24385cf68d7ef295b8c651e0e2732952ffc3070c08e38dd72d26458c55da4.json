{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar _videoJs = require('video.js');\nvar _videoJs2 = _interopRequireDefault(_videoJs);\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({\n      IWillNotUseThisInPlugins: true\n    });\n    var sourceObj = tech.currentSource_;\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n  player.ready(function () {\n    player.trigger({\n      type: 'usage',\n      name: 'hls-error-reload-initialized'\n    });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n    player.one('loadedmetadata', loadedMetadataHandler);\n    player.src(sourceObj);\n    player.trigger({\n      type: 'usage',\n      name: 'hls-error-reload'\n    });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({\n        type: 'usage',\n        name: 'hls-error-reload-canceled'\n      });\n      return;\n    }\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","_interopRequireDefault","obj","__esModule","_videoJs","require","_videoJs2","defaultOptions","errorInterval","getSource","next","tech","IWillNotUseThisInPlugins","sourceObj","currentSource_","initPlugin","player","options","lastCalled","seekTo","localOptions","mergeOptions","ready","trigger","type","name","loadedMetadataHandler","currentTime","setSource","undefined","duration","Infinity","one","src","play","errorHandler","Date","now","log","error","call","cleanupEvents","off","reinitPlugin","newOptions","on","reloadSourceOnError","module"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-hls/es5/reload-source-on-error.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _videoJs = require('video.js');\n\nvar _videoJs2 = _interopRequireDefault(_videoJs);\n\nvar defaultOptions = {\n  errorInterval: 30,\n  getSource: function getSource(next) {\n    var tech = this.tech({ IWillNotUseThisInPlugins: true });\n    var sourceObj = tech.currentSource_;\n\n    return next(sourceObj);\n  }\n};\n\n/**\n * Main entry point for the plugin\n *\n * @param {Player} player a reference to a videojs Player instance\n * @param {Object} [options] an object with plugin options\n * @private\n */\nvar initPlugin = function initPlugin(player, options) {\n  var lastCalled = 0;\n  var seekTo = 0;\n  var localOptions = _videoJs2['default'].mergeOptions(defaultOptions, options);\n\n  player.ready(function () {\n    player.trigger({ type: 'usage', name: 'hls-error-reload-initialized' });\n  });\n\n  /**\n   * Player modifications to perform that must wait until `loadedmetadata`\n   * has been triggered\n   *\n   * @private\n   */\n  var loadedMetadataHandler = function loadedMetadataHandler() {\n    if (seekTo) {\n      player.currentTime(seekTo);\n    }\n  };\n\n  /**\n   * Set the source on the player element, play, and seek if necessary\n   *\n   * @param {Object} sourceObj An object specifying the source url and mime-type to play\n   * @private\n   */\n  var setSource = function setSource(sourceObj) {\n    if (sourceObj === null || sourceObj === undefined) {\n      return;\n    }\n    seekTo = player.duration() !== Infinity && player.currentTime() || 0;\n\n    player.one('loadedmetadata', loadedMetadataHandler);\n\n    player.src(sourceObj);\n    player.trigger({ type: 'usage', name: 'hls-error-reload' });\n    player.play();\n  };\n\n  /**\n   * Attempt to get a source from either the built-in getSource function\n   * or a custom function provided via the options\n   *\n   * @private\n   */\n  var errorHandler = function errorHandler() {\n    // Do not attempt to reload the source if a source-reload occurred before\n    // 'errorInterval' time has elapsed since the last source-reload\n    if (Date.now() - lastCalled < localOptions.errorInterval * 1000) {\n      player.trigger({ type: 'usage', name: 'hls-error-reload-canceled' });\n      return;\n    }\n\n    if (!localOptions.getSource || typeof localOptions.getSource !== 'function') {\n      _videoJs2['default'].log.error('ERROR: reloadSourceOnError - The option getSource must be a function!');\n      return;\n    }\n    lastCalled = Date.now();\n\n    return localOptions.getSource.call(player, setSource);\n  };\n\n  /**\n   * Unbind any event handlers that were bound by the plugin\n   *\n   * @private\n   */\n  var cleanupEvents = function cleanupEvents() {\n    player.off('loadedmetadata', loadedMetadataHandler);\n    player.off('error', errorHandler);\n    player.off('dispose', cleanupEvents);\n  };\n\n  /**\n   * Cleanup before re-initializing the plugin\n   *\n   * @param {Object} [newOptions] an object with plugin options\n   * @private\n   */\n  var reinitPlugin = function reinitPlugin(newOptions) {\n    cleanupEvents();\n    initPlugin(player, newOptions);\n  };\n\n  player.on('error', errorHandler);\n  player.on('dispose', cleanupEvents);\n\n  // Overwrite the plugin function so that we can correctly cleanup before\n  // initializing the plugin\n  player.reloadSourceOnError = reinitPlugin;\n};\n\n/**\n * Reload the source when an error is detected as long as there\n * wasn't an error previously within the last 30 seconds\n *\n * @param {Object} [options] an object with plugin options\n */\nvar reloadSourceOnError = function reloadSourceOnError(options) {\n  initPlugin(this, options);\n};\n\nexports['default'] = reloadSourceOnError;\nmodule.exports = exports['default'];"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AAEF,SAASC,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAAE;AAEhG,IAAIE,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AAElC,IAAIC,SAAS,GAAGL,sBAAsB,CAACG,QAAQ,CAAC;AAEhD,IAAIG,cAAc,GAAG;EACnBC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,SAASA,SAASA,CAACC,IAAI,EAAE;IAClC,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC;MAAEC,wBAAwB,EAAE;IAAK,CAAC,CAAC;IACxD,IAAIC,SAAS,GAAGF,IAAI,CAACG,cAAc;IAEnC,OAAOJ,IAAI,CAACG,SAAS,CAAC;EACxB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACpD,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIC,YAAY,GAAGd,SAAS,CAAC,SAAS,CAAC,CAACe,YAAY,CAACd,cAAc,EAAEU,OAAO,CAAC;EAE7ED,MAAM,CAACM,KAAK,CAAC,YAAY;IACvBN,MAAM,CAACO,OAAO,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAE;IAA+B,CAAC,CAAC;EACzE,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,qBAAqB,GAAG,SAASA,qBAAqBA,CAAA,EAAG;IAC3D,IAAIP,MAAM,EAAE;MACVH,MAAM,CAACW,WAAW,CAACR,MAAM,CAAC;IAC5B;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,IAAIS,SAAS,GAAG,SAASA,SAASA,CAACf,SAAS,EAAE;IAC5C,IAAIA,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKgB,SAAS,EAAE;MACjD;IACF;IACAV,MAAM,GAAGH,MAAM,CAACc,QAAQ,CAAC,CAAC,KAAKC,QAAQ,IAAIf,MAAM,CAACW,WAAW,CAAC,CAAC,IAAI,CAAC;IAEpEX,MAAM,CAACgB,GAAG,CAAC,gBAAgB,EAAEN,qBAAqB,CAAC;IAEnDV,MAAM,CAACiB,GAAG,CAACpB,SAAS,CAAC;IACrBG,MAAM,CAACO,OAAO,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAmB,CAAC,CAAC;IAC3DT,MAAM,CAACkB,IAAI,CAAC,CAAC;EACf,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;IACzC;IACA;IACA,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGnB,UAAU,GAAGE,YAAY,CAACZ,aAAa,GAAG,IAAI,EAAE;MAC/DQ,MAAM,CAACO,OAAO,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAEC,IAAI,EAAE;MAA4B,CAAC,CAAC;MACpE;IACF;IAEA,IAAI,CAACL,YAAY,CAACX,SAAS,IAAI,OAAOW,YAAY,CAACX,SAAS,KAAK,UAAU,EAAE;MAC3EH,SAAS,CAAC,SAAS,CAAC,CAACgC,GAAG,CAACC,KAAK,CAAC,uEAAuE,CAAC;MACvG;IACF;IACArB,UAAU,GAAGkB,IAAI,CAACC,GAAG,CAAC,CAAC;IAEvB,OAAOjB,YAAY,CAACX,SAAS,CAAC+B,IAAI,CAACxB,MAAM,EAAEY,SAAS,CAAC;EACvD,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,IAAIa,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAG;IAC3CzB,MAAM,CAAC0B,GAAG,CAAC,gBAAgB,EAAEhB,qBAAqB,CAAC;IACnDV,MAAM,CAAC0B,GAAG,CAAC,OAAO,EAAEP,YAAY,CAAC;IACjCnB,MAAM,CAAC0B,GAAG,CAAC,SAAS,EAAED,aAAa,CAAC;EACtC,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,IAAIE,YAAY,GAAG,SAASA,YAAYA,CAACC,UAAU,EAAE;IACnDH,aAAa,CAAC,CAAC;IACf1B,UAAU,CAACC,MAAM,EAAE4B,UAAU,CAAC;EAChC,CAAC;EAED5B,MAAM,CAAC6B,EAAE,CAAC,OAAO,EAAEV,YAAY,CAAC;EAChCnB,MAAM,CAAC6B,EAAE,CAAC,SAAS,EAAEJ,aAAa,CAAC;;EAEnC;EACA;EACAzB,MAAM,CAAC8B,mBAAmB,GAAGH,YAAY;AAC3C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,mBAAmB,GAAG,SAASA,mBAAmBA,CAAC7B,OAAO,EAAE;EAC9DF,UAAU,CAAC,IAAI,EAAEE,OAAO,CAAC;AAC3B,CAAC;AAEDlB,OAAO,CAAC,SAAS,CAAC,GAAG+C,mBAAmB;AACxCC,MAAM,CAAChD,OAAO,GAAGA,OAAO,CAAC,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}