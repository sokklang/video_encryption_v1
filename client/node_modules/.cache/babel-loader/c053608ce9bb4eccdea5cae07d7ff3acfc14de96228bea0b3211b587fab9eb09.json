{"ast":null,"code":"/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({\n          type: 'usage',\n          name: 'hls-608'\n        });\n        var track = player.textTracks().getTrackById(trackId);\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","createTextTracksIfNecessary","sourceBuffer","mediaSource","segment","player","player_","captions","length","inbandTextTracks_","trackId","captionStreams","tech_","trigger","type","name","track","textTracks","getTrackById","addRemoteTextTrack","kind","id","label","metadata","metadataTrack_","inBandMetadataTrackDispatchType","dispatchType","module"],"sources":["C:/Users/J3adl30y/Desktop/videostreaming/client/node_modules/videojs-contrib-media-sources/es5/create-text-tracks-if-necessary.js"],"sourcesContent":["/**\n * @file create-text-tracks-if-necessary.js\n */\n\n/**\n * Create text tracks on video.js if they exist on a segment.\n *\n * @param {Object} sourceBuffer the VSB or FSB\n * @param {Object} mediaSource the HTML or Flash media source\n * @param {Object} segment the segment that may contain the text track\n * @private\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar createTextTracksIfNecessary = function createTextTracksIfNecessary(sourceBuffer, mediaSource, segment) {\n  var player = mediaSource.player_;\n\n  // create an in-band caption track if one is present in the segment\n  if (segment.captions && segment.captions.length) {\n    if (!sourceBuffer.inbandTextTracks_) {\n      sourceBuffer.inbandTextTracks_ = {};\n    }\n\n    for (var trackId in segment.captionStreams) {\n      if (!sourceBuffer.inbandTextTracks_[trackId]) {\n        player.tech_.trigger({ type: 'usage', name: 'hls-608' });\n        var track = player.textTracks().getTrackById(trackId);\n\n        if (track) {\n          // Resuse an existing track with a CC# id because this was\n          // very likely created by videojs-contrib-hls from information\n          // in the m3u8 for us to use\n          sourceBuffer.inbandTextTracks_[trackId] = track;\n        } else {\n          // Otherwise, create a track with the default `CC#` label and\n          // without a language\n          sourceBuffer.inbandTextTracks_[trackId] = player.addRemoteTextTrack({\n            kind: 'captions',\n            id: trackId,\n            label: trackId\n          }, false).track;\n        }\n      }\n    }\n  }\n\n  if (segment.metadata && segment.metadata.length && !sourceBuffer.metadataTrack_) {\n    sourceBuffer.metadataTrack_ = player.addRemoteTextTrack({\n      kind: 'metadata',\n      label: 'Timed Metadata'\n    }, false).track;\n    sourceBuffer.metadataTrack_.inBandMetadataTrackDispatchType = segment.metadata.dispatchType;\n  }\n};\n\nexports['default'] = createTextTracksIfNecessary;\nmodule.exports = exports['default'];"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACF,IAAIC,2BAA2B,GAAG,SAASA,2BAA2BA,CAACC,YAAY,EAAEC,WAAW,EAAEC,OAAO,EAAE;EACzG,IAAIC,MAAM,GAAGF,WAAW,CAACG,OAAO;;EAEhC;EACA,IAAIF,OAAO,CAACG,QAAQ,IAAIH,OAAO,CAACG,QAAQ,CAACC,MAAM,EAAE;IAC/C,IAAI,CAACN,YAAY,CAACO,iBAAiB,EAAE;MACnCP,YAAY,CAACO,iBAAiB,GAAG,CAAC,CAAC;IACrC;IAEA,KAAK,IAAIC,OAAO,IAAIN,OAAO,CAACO,cAAc,EAAE;MAC1C,IAAI,CAACT,YAAY,CAACO,iBAAiB,CAACC,OAAO,CAAC,EAAE;QAC5CL,MAAM,CAACO,KAAK,CAACC,OAAO,CAAC;UAAEC,IAAI,EAAE,OAAO;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC;QACxD,IAAIC,KAAK,GAAGX,MAAM,CAACY,UAAU,CAAC,CAAC,CAACC,YAAY,CAACR,OAAO,CAAC;QAErD,IAAIM,KAAK,EAAE;UACT;UACA;UACA;UACAd,YAAY,CAACO,iBAAiB,CAACC,OAAO,CAAC,GAAGM,KAAK;QACjD,CAAC,MAAM;UACL;UACA;UACAd,YAAY,CAACO,iBAAiB,CAACC,OAAO,CAAC,GAAGL,MAAM,CAACc,kBAAkB,CAAC;YAClEC,IAAI,EAAE,UAAU;YAChBC,EAAE,EAAEX,OAAO;YACXY,KAAK,EAAEZ;UACT,CAAC,EAAE,KAAK,CAAC,CAACM,KAAK;QACjB;MACF;IACF;EACF;EAEA,IAAIZ,OAAO,CAACmB,QAAQ,IAAInB,OAAO,CAACmB,QAAQ,CAACf,MAAM,IAAI,CAACN,YAAY,CAACsB,cAAc,EAAE;IAC/EtB,YAAY,CAACsB,cAAc,GAAGnB,MAAM,CAACc,kBAAkB,CAAC;MACtDC,IAAI,EAAE,UAAU;MAChBE,KAAK,EAAE;IACT,CAAC,EAAE,KAAK,CAAC,CAACN,KAAK;IACfd,YAAY,CAACsB,cAAc,CAACC,+BAA+B,GAAGrB,OAAO,CAACmB,QAAQ,CAACG,YAAY;EAC7F;AACF,CAAC;AAED3B,OAAO,CAAC,SAAS,CAAC,GAAGE,2BAA2B;AAChD0B,MAAM,CAAC5B,OAAO,GAAGA,OAAO,CAAC,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}